
OLED_EX4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ec  00800100  00001680  00001714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008004ec  008004ec  00001b00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018bc  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfd  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6b  00000000  00000000  000041a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00004c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000703  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ad  00000000  00000000  0000571b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000068c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <testPrint_font+0x54>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	14 e0       	ldi	r17, 0x04	; 4
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e8       	ldi	r30, 0x80	; 128
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 3e       	cpi	r26, 0xEC	; 236
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	ac ee       	ldi	r26, 0xEC	; 236
     38e:	b4 e0       	ldi	r27, 0x04	; 4
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 3f       	cpi	r26, 0xFE	; 254
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 a5 03 	call	0x74a	; 0x74a <main>
     39e:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_read>:

uint8_t * adc_read()
{
	volatile char *adc = (char *) 0x1400;
	uint8_t command = 3;
	adc[0] = command;
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <__bss_end+0xf02>
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <adc_read+0x16>
     3b2:	01 97       	sbiw	r24, 0x01	; 1

	//_delay_us(200);
	for(int j=0; j<10; j++)
	{
		for(int k=0; k<6000; k++);
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <adc_read+0xc>
     3b6:	21 50       	subi	r18, 0x01	; 1
     3b8:	31 09       	sbc	r19, r1
	volatile char *adc = (char *) 0x1400;
	uint8_t command = 3;
	adc[0] = command;

	//_delay_us(200);
	for(int j=0; j<10; j++)
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <adc_read+0x1c>
 */ 

#include <ADC_Driver.h>

uint8_t * adc_read()
{
     3bc:	80 e7       	ldi	r24, 0x70	; 112
     3be:	97 e1       	ldi	r25, 0x17	; 23
     3c0:	f8 cf       	rjmp	.-16     	; 0x3b2 <adc_read+0xc>
	{
		for(int k=0; k<6000; k++);
	}
	
	static uint8_t value[4];
	value[0] = adc[0];
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b4 e1       	ldi	r27, 0x14	; 20
     3c6:	8c 91       	ld	r24, X
     3c8:	ee ee       	ldi	r30, 0xEE	; 238
     3ca:	f4 e0       	ldi	r31, 0x04	; 4
     3cc:	80 83       	st	Z, r24
	value[1] = adc[0];
     3ce:	8c 91       	ld	r24, X
     3d0:	81 83       	std	Z+1, r24	; 0x01
	value[2] = adc[0];
     3d2:	8c 91       	ld	r24, X
     3d4:	82 83       	std	Z+2, r24	; 0x02
	value[3] = adc[0];
     3d6:	8c 91       	ld	r24, X
     3d8:	83 83       	std	Z+3, r24	; 0x03
	return value;
}
     3da:	cf 01       	movw	r24, r30
     3dc:	08 95       	ret

000003de <adc_formatter>:

int8_t adc_formatter(uint8_t reading, uint8_t offset){		// Takes reading from ADC [00-FF] and returns number between -128 and 127
	int8_t reading_conv;
	int interim;
	if (reading <= offset) {
     3de:	68 17       	cp	r22, r24
     3e0:	50 f0       	brcs	.+20     	; 0x3f6 <adc_formatter+0x18>
		interim = -(128 - ((reading * 128) / offset));
     3e2:	20 e8       	ldi	r18, 0x80	; 128
     3e4:	82 9f       	mul	r24, r18
     3e6:	c0 01       	movw	r24, r0
     3e8:	11 24       	eor	r1, r1
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     3f0:	60 58       	subi	r22, 0x80	; 128
     3f2:	71 09       	sbc	r23, r1
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		} 
	else {
		interim = ((reading - offset) * 127) / (255-offset);
     3f6:	46 2f       	mov	r20, r22
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	28 2f       	mov	r18, r24
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	24 1b       	sub	r18, r20
     400:	35 0b       	sbc	r19, r21
     402:	c9 01       	movw	r24, r18
     404:	96 95       	lsr	r25
     406:	98 2f       	mov	r25, r24
     408:	88 27       	eor	r24, r24
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	82 1b       	sub	r24, r18
     410:	93 0b       	sbc	r25, r19
     412:	6f ef       	ldi	r22, 0xFF	; 255
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	64 1b       	sub	r22, r20
     418:	75 0b       	sbc	r23, r21
     41a:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
	}
	
	return reading_conv = interim;
}
     41e:	86 2f       	mov	r24, r22
     420:	08 95       	ret

00000422 <array_average>:

uint8_t array_average(uint8_t *array, uint8_t size){		// Broken; doesnt work for some reason
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	ec 01       	movw	r28, r24
     42e:	f6 2e       	mov	r15, r22
	int sum, loop;
	uint8_t avg;
	sum = avg = 0;
	
	printf("Computing average of array of size %d \n", size);
     430:	06 2f       	mov	r16, r22
     432:	10 e0       	ldi	r17, 0x00	; 0
     434:	1f 92       	push	r1
     436:	6f 93       	push	r22
     438:	8c e1       	ldi	r24, 0x1C	; 28
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
	
	for(loop = 0; loop < size; loop++) {
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	10 16       	cp	r1, r16
     44e:	11 06       	cpc	r1, r17
     450:	6c f4       	brge	.+26     	; 0x46c <array_average+0x4a>
     452:	fe 01       	movw	r30, r28
     454:	ae 01       	movw	r20, r28
     456:	4f 0d       	add	r20, r15
     458:	51 1d       	adc	r21, r1
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
		sum = sum + array[loop];
     45e:	91 91       	ld	r25, Z+
     460:	29 0f       	add	r18, r25
     462:	31 1d       	adc	r19, r1
	uint8_t avg;
	sum = avg = 0;
	
	printf("Computing average of array of size %d \n", size);
	
	for(loop = 0; loop < size; loop++) {
     464:	e4 17       	cp	r30, r20
     466:	f5 07       	cpc	r31, r21
     468:	d1 f7       	brne	.-12     	; 0x45e <array_average+0x3c>
     46a:	02 c0       	rjmp	.+4      	; 0x470 <array_average+0x4e>
}

uint8_t array_average(uint8_t *array, uint8_t size){		// Broken; doesnt work for some reason
	int sum, loop;
	uint8_t avg;
	sum = avg = 0;
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
	
	for(loop = 0; loop < size; loop++) {
		sum = sum + array[loop];
	}
	
	avg = sum / size;
     470:	c9 01       	movw	r24, r18
     472:	b8 01       	movw	r22, r16
     474:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     478:	eb 01       	movw	r28, r22
	printf("Total sum was %d. Computed averaged returned is %d. \n\n", sum, avg);
     47a:	cb 01       	movw	r24, r22
     47c:	99 27       	eor	r25, r25
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	3f 93       	push	r19
     484:	2f 93       	push	r18
     486:	84 e4       	ldi	r24, 0x44	; 68
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
	return avg;
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
}
     49e:	8c 2f       	mov	r24, r28
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	08 95       	ret

000004ac <adc_joystick_autocalibrate>:

uint8_t * adc_joystick_autocalibrate(uint8_t samples){		// Takes a number of samples from both joysticks and returns pointer to array of averages [Doesnt work]
     4ac:	2f 92       	push	r2
     4ae:	3f 92       	push	r3
     4b0:	4f 92       	push	r4
     4b2:	5f 92       	push	r5
     4b4:	7f 92       	push	r7
     4b6:	8f 92       	push	r8
     4b8:	9f 92       	push	r9
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <adc_joystick_autocalibrate+0x24>
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <adc_joystick_autocalibrate+0x26>
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	78 2e       	mov	r7, r24
	
	joy_origins[0] = array_average(joy1_samples, samples);
	joy_origins[1] = array_average(joy2_samples, samples);
	
	return joy_origins;
}
     4d8:	8d b6       	in	r8, 0x3d	; 61
     4da:	9e b6       	in	r9, 0x3e	; 62
	return avg;
}

uint8_t * adc_joystick_autocalibrate(uint8_t samples){		// Takes a number of samples from both joysticks and returns pointer to array of averages [Doesnt work]
	uint8_t *sampled_value;
	uint8_t joy1_samples[samples];
     4dc:	08 2f       	mov	r16, r24
     4de:	10 e0       	ldi	r17, 0x00	; 0
     4e0:	8d b7       	in	r24, 0x3d	; 61
     4e2:	9e b7       	in	r25, 0x3e	; 62
     4e4:	80 1b       	sub	r24, r16
     4e6:	91 0b       	sbc	r25, r17
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	9e bf       	out	0x3e, r25	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	8d bf       	out	0x3d, r24	; 61
     4f2:	ed b7       	in	r30, 0x3d	; 61
     4f4:	fe b7       	in	r31, 0x3e	; 62
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	6f 01       	movw	r12, r30
	uint8_t joy2_samples[samples];
     4fa:	80 1b       	sub	r24, r16
     4fc:	91 0b       	sbc	r25, r17
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	9e bf       	out	0x3e, r25	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	8d bf       	out	0x3d, r24	; 61
     508:	ed b7       	in	r30, 0x3d	; 61
     50a:	fe b7       	in	r31, 0x3e	; 62
     50c:	31 96       	adiw	r30, 0x01	; 1
     50e:	fc 83       	std	Y+4, r31	; 0x04
     510:	eb 83       	std	Y+3, r30	; 0x03
	static uint8_t joy_origins[2];
	
	for(int i=0; i<samples; i++){
     512:	10 16       	cp	r1, r16
     514:	11 06       	cpc	r1, r17
     516:	0c f0       	brlt	.+2      	; 0x51a <__stack+0x1b>
     518:	46 c0       	rjmp	.+140    	; 0x5a6 <__stack+0xa7>
     51a:	56 01       	movw	r10, r12
     51c:	fa 83       	std	Y+2, r31	; 0x02
     51e:	e9 83       	std	Y+1, r30	; 0x01
     520:	0c 0d       	add	r16, r12
     522:	1d 1d       	adc	r17, r13
		sampled_value = adc_read();
		printf("Sample from Joy1 = %d \n", sampled_value[0]);
     524:	0f 2e       	mov	r0, r31
     526:	fb e7       	ldi	r31, 0x7B	; 123
     528:	4f 2e       	mov	r4, r31
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	5f 2e       	mov	r5, r31
     52e:	f0 2d       	mov	r31, r0
		printf("Sample from Joy2 = %d \n", sampled_value[1]);
     530:	0f 2e       	mov	r0, r31
     532:	f3 e9       	ldi	r31, 0x93	; 147
     534:	2f 2e       	mov	r2, r31
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	3f 2e       	mov	r3, r31
     53a:	f0 2d       	mov	r31, r0
	uint8_t joy1_samples[samples];
	uint8_t joy2_samples[samples];
	static uint8_t joy_origins[2];
	
	for(int i=0; i<samples; i++){
		sampled_value = adc_read();
     53c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_read>
     540:	7c 01       	movw	r14, r24
		printf("Sample from Joy1 = %d \n", sampled_value[0]);
     542:	fc 01       	movw	r30, r24
     544:	80 81       	ld	r24, Z
     546:	1f 92       	push	r1
     548:	8f 93       	push	r24
     54a:	5f 92       	push	r5
     54c:	4f 92       	push	r4
     54e:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
		printf("Sample from Joy2 = %d \n", sampled_value[1]);
     552:	f7 01       	movw	r30, r14
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	1f 92       	push	r1
     558:	8f 93       	push	r24
     55a:	3f 92       	push	r3
     55c:	2f 92       	push	r2
     55e:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
		joy1_samples[i] = sampled_value[0];
     562:	f7 01       	movw	r30, r14
     564:	80 81       	ld	r24, Z
     566:	f5 01       	movw	r30, r10
     568:	81 93       	st	Z+, r24
     56a:	5f 01       	movw	r10, r30
		joy2_samples[i] = sampled_value[1];
     56c:	f7 01       	movw	r30, r14
     56e:	81 81       	ldd	r24, Z+1	; 0x01
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	81 93       	st	Z+, r24
     576:	fa 83       	std	Y+2, r31	; 0x02
     578:	e9 83       	std	Y+1, r30	; 0x01
     57a:	8d b7       	in	r24, 0x3d	; 61
     57c:	9e b7       	in	r25, 0x3e	; 62
     57e:	08 96       	adiw	r24, 0x08	; 8
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	9e bf       	out	0x3e, r25	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	8d bf       	out	0x3d, r24	; 61
     58a:	28 ee       	ldi	r18, 0xE8	; 232
     58c:	33 e0       	ldi	r19, 0x03	; 3
     58e:	05 c0       	rjmp	.+10     	; 0x59a <__stack+0x9b>
     590:	01 97       	sbiw	r24, 0x01	; 1
		
		// Delay
		for(int j=0; j<1000; j++)
		{
			for(int k=0; k<1000; k++);
     592:	f1 f7       	brne	.-4      	; 0x590 <__stack+0x91>
     594:	21 50       	subi	r18, 0x01	; 1
     596:	31 09       	sbc	r19, r1
		printf("Sample from Joy2 = %d \n", sampled_value[1]);
		joy1_samples[i] = sampled_value[0];
		joy2_samples[i] = sampled_value[1];
		
		// Delay
		for(int j=0; j<1000; j++)
     598:	19 f0       	breq	.+6      	; 0x5a0 <__stack+0xa1>
	avg = sum / size;
	printf("Total sum was %d. Computed averaged returned is %d. \n\n", sum, avg);
	return avg;
}

uint8_t * adc_joystick_autocalibrate(uint8_t samples){		// Takes a number of samples from both joysticks and returns pointer to array of averages [Doesnt work]
     59a:	88 ee       	ldi	r24, 0xE8	; 232
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	f8 cf       	rjmp	.-16     	; 0x590 <__stack+0x91>
	uint8_t *sampled_value;
	uint8_t joy1_samples[samples];
	uint8_t joy2_samples[samples];
	static uint8_t joy_origins[2];
	
	for(int i=0; i<samples; i++){
     5a0:	a0 16       	cp	r10, r16
     5a2:	b1 06       	cpc	r11, r17
     5a4:	59 f6       	brne	.-106    	; 0x53c <__stack+0x3d>
		{
			for(int k=0; k<1000; k++);
		}
	}
	
	joy_origins[0] = array_average(joy1_samples, samples);
     5a6:	67 2d       	mov	r22, r7
     5a8:	c6 01       	movw	r24, r12
     5aa:	0e 94 11 02 	call	0x422	; 0x422 <array_average>
     5ae:	0c ee       	ldi	r16, 0xEC	; 236
     5b0:	14 e0       	ldi	r17, 0x04	; 4
     5b2:	f8 01       	movw	r30, r16
     5b4:	80 83       	st	Z, r24
	joy_origins[1] = array_average(joy2_samples, samples);
     5b6:	67 2d       	mov	r22, r7
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	0e 94 11 02 	call	0x422	; 0x422 <array_average>
     5c0:	f8 01       	movw	r30, r16
     5c2:	81 83       	std	Z+1, r24	; 0x01
	
	return joy_origins;
}
     5c4:	c8 01       	movw	r24, r16
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	9e be       	out	0x3e, r9	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	8d be       	out	0x3d, r8	; 61
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	7f 90       	pop	r7
     5f2:	5f 90       	pop	r5
     5f4:	4f 90       	pop	r4
     5f6:	3f 90       	pop	r3
     5f8:	2f 90       	pop	r2
     5fa:	08 95       	ret

000005fc <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

int uart_putchar(char c, FILE *stream)
{
     5fc:	cf 93       	push	r28
     5fe:	c8 2f       	mov	r28, r24
	if (c == '\n')
     600:	8a 30       	cpi	r24, 0x0A	; 10
     602:	19 f4       	brne	.+6      	; 0x60a <uart_putchar+0xe>
	uart_putchar('\r', stream);
     604:	8d e0       	ldi	r24, 0x0D	; 13
     606:	0e 94 fe 02 	call	0x5fc	; 0x5fc <uart_putchar>
	loop_until_bit_is_set(UCSR0A, UDRE0);
     60a:	5d 9b       	sbis	0x0b, 5	; 11
     60c:	fe cf       	rjmp	.-4      	; 0x60a <uart_putchar+0xe>
	UDR0 = c;
     60e:	cc b9       	out	0x0c, r28	; 12
	return 0;
}
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <xmem_init>:



void xmem_init(void)
{
	MCUCR |= (1<<SRE);
     618:	85 b7       	in	r24, 0x35	; 53
     61a:	80 68       	ori	r24, 0x80	; 128
     61c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     61e:	80 b7       	in	r24, 0x30	; 48
     620:	80 62       	ori	r24, 0x20	; 32
     622:	80 bf       	out	0x30, r24	; 48
	DDRC |= 0xFF;
     624:	84 b3       	in	r24, 0x14	; 20
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     62a:	15 ba       	out	0x15, r1	; 21
     62c:	08 95       	ret

0000062e <Init_ports>:
}


void Init_ports(void)
{
	DDRD |= (1<<PD6);
     62e:	8e 9a       	sbi	0x11, 6	; 17
	PORTD |= (1<<PD6);
     630:	96 9a       	sbi	0x12, 6	; 18
	DDRB |= (1<<PB0);
     632:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1<<PB1);
     634:	b9 98       	cbi	0x17, 1	; 23
	
	DDRB &= ~(1<<PB2) | ~(1<<PB3); // Configure pins PB2 and PB3 to act as inputs (for the USB slider buttons)
     636:	87 b3       	in	r24, 0x17	; 23
     638:	87 bb       	out	0x17, r24	; 23
     63a:	08 95       	ret

0000063c <Init_pwm>:
}

void Init_pwm(void)
{
	TCCR0 |= (1<<COM00) | (1<<WGM01) | (1<<CS00);
     63c:	83 b7       	in	r24, 0x33	; 51
     63e:	89 61       	ori	r24, 0x19	; 25
     640:	83 bf       	out	0x33, r24	; 51
     642:	08 95       	ret

00000644 <SRAM_test>:
*/



void SRAM_test(void)
{
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\r\n");
     654:	8b ea       	ldi	r24, 0xAB	; 171
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     65c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <rand>
     660:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     662:	0e 94 33 06 	call	0xc66	; 0xc66 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     666:	c1 2c       	mov	r12, r1
     668:	d1 2c       	mov	r13, r1

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     66a:	00 e0       	ldi	r16, 0x00	; 0
     66c:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     66e:	c2 ec       	ldi	r28, 0xC2	; 194
     670:	d1 e0       	ldi	r29, 0x01	; 1
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     672:	0e 94 2e 06 	call	0xc5c	; 0xc5c <rand>
     676:	f6 01       	movw	r30, r12
     678:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     67a:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     67c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     67e:	28 17       	cp	r18, r24
     680:	a9 f0       	breq	.+42     	; 0x6ac <SRAM_test+0x68>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     682:	99 27       	eor	r25, r25
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	1f 92       	push	r1
     68a:	2f 93       	push	r18
     68c:	df 92       	push	r13
     68e:	cf 92       	push	r12
     690:	df 93       	push	r29
     692:	cf 93       	push	r28
     694:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
			write_errors++;
     698:	0f 5f       	subi	r16, 0xFF	; 255
     69a:	1f 4f       	sbci	r17, 0xFF	; 255
     69c:	8d b7       	in	r24, 0x3d	; 61
     69e:	9e b7       	in	r25, 0x3e	; 62
     6a0:	08 96       	adiw	r24, 0x08	; 8
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	9e bf       	out	0x3e, r25	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6ac:	9f ef       	ldi	r25, 0xFF	; 255
     6ae:	c9 1a       	sub	r12, r25
     6b0:	d9 0a       	sbc	r13, r25
     6b2:	c1 14       	cp	r12, r1
     6b4:	88 e0       	ldi	r24, 0x08	; 8
     6b6:	d8 06       	cpc	r13, r24
     6b8:	e1 f6       	brne	.-72     	; 0x672 <SRAM_test+0x2e>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     6ba:	c7 01       	movw	r24, r14
     6bc:	0e 94 33 06 	call	0xc66	; 0xc66 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6c0:	c0 e0       	ldi	r28, 0x00	; 0
     6c2:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     6c4:	e1 2c       	mov	r14, r1
     6c6:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     6c8:	0f 2e       	mov	r0, r31
     6ca:	fc ef       	ldi	r31, 0xFC	; 252
     6cc:	cf 2e       	mov	r12, r31
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	df 2e       	mov	r13, r31
     6d2:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     6d4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <rand>
     6d8:	fe 01       	movw	r30, r28
     6da:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     6dc:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     6de:	28 17       	cp	r18, r24
     6e0:	b1 f0       	breq	.+44     	; 0x70e <SRAM_test+0xca>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     6e2:	99 27       	eor	r25, r25
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	1f 92       	push	r1
     6ea:	2f 93       	push	r18
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	df 92       	push	r13
     6f2:	cf 92       	push	r12
     6f4:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
			retrieval_errors++;
     6f8:	9f ef       	ldi	r25, 0xFF	; 255
     6fa:	e9 1a       	sub	r14, r25
     6fc:	f9 0a       	sbc	r15, r25
     6fe:	8d b7       	in	r24, 0x3d	; 61
     700:	9e b7       	in	r25, 0x3e	; 62
     702:	08 96       	adiw	r24, 0x08	; 8
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	9e bf       	out	0x3e, r25	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     70e:	21 96       	adiw	r28, 0x01	; 1
     710:	c1 15       	cp	r28, r1
     712:	98 e0       	ldi	r25, 0x08	; 8
     714:	d9 07       	cpc	r29, r25
     716:	f1 f6       	brne	.-68     	; 0x6d4 <SRAM_test+0x90>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \r\n%4d errors in write phase and \r\n%4d errors in retrieval phase\r\n\r\n", write_errors, retrieval_errors);
     718:	ff 92       	push	r15
     71a:	ef 92       	push	r14
     71c:	1f 93       	push	r17
     71e:	0f 93       	push	r16
     720:	8a e3       	ldi	r24, 0x3A	; 58
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
}
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	08 95       	ret

0000074a <main>:

int main(void)
{
	// Initialize USART transmission drivers, as well as MCU ports and external memory
	USART_init(MYUBRR);
     74a:	8f e1       	ldi	r24, 0x1F	; 31
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <USART_init>
	stdout = &mystdout;
     752:	8a e0       	ldi	r24, 0x0A	; 10
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <__iob+0x3>
     75a:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <__iob+0x2>
	printf("Program started\n");
     75e:	87 e9       	ldi	r24, 0x97	; 151
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
	xmem_init();
     766:	0e 94 0c 03 	call	0x618	; 0x618 <xmem_init>
	Init_ports();
     76a:	0e 94 17 03 	call	0x62e	; 0x62e <Init_ports>
	Init_pwm();
     76e:	0e 94 1e 03 	call	0x63c	; 0x63c <Init_pwm>
	printf("XMEM Init completed\n");
     772:	87 ea       	ldi	r24, 0xA7	; 167
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
	
	// Initialize OLED screen on USB board
	oled_init();
     77a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_init>
     77e:	c0 e0       	ldi	r28, 0x00	; 0
	// OLED Tests
	for(int j=0; j<10; j++){
		testPrint_font(j);
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 77 05 	call	0xaee	; 0xaee <testPrint_font>
     786:	cf 5f       	subi	r28, 0xFF	; 255
	printf("XMEM Init completed\n");
	
	// Initialize OLED screen on USB board
	oled_init();
	// OLED Tests
	for(int j=0; j<10; j++){
     788:	ca 30       	cpi	r28, 0x0A	; 10
     78a:	d1 f7       	brne	.-12     	; 0x780 <main+0x36>
		testPrint_font(j);
	}
		
	printf("Attempting to clear OLED screen...\n");
     78c:	8b eb       	ldi	r24, 0xBB	; 187
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
	oled_reset();
     794:	0e 94 6b 05 	call	0xad6	; 0xad6 <oled_reset>
     798:	84 e6       	ldi	r24, 0x64	; 100
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	05 c0       	rjmp	.+10     	; 0x7a8 <main+0x5e>
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	31 09       	sbc	r19, r1
	// Delay
	for(int j=0; j<100; j++)
	{
		for(int k=0; k<30000; k++);
     7a2:	e9 f7       	brne	.-6      	; 0x79e <main+0x54>
     7a4:	01 97       	sbiw	r24, 0x01	; 1
	}
		
	printf("Attempting to clear OLED screen...\n");
	oled_reset();
	// Delay
	for(int j=0; j<100; j++)
     7a6:	19 f0       	breq	.+6      	; 0x7ae <main+0x64>
	Init_ports();
	Init_pwm();
	printf("XMEM Init completed\n");
	
	// Initialize OLED screen on USB board
	oled_init();
     7a8:	20 e3       	ldi	r18, 0x30	; 48
     7aa:	35 e7       	ldi	r19, 0x75	; 117
     7ac:	f8 cf       	rjmp	.-16     	; 0x79e <main+0x54>
	{
		for(int k=0; k<30000; k++);
	}
	
	// Test SRAM integrity
	SRAM_test();
     7ae:	0e 94 22 03 	call	0x644	; 0x644 <SRAM_test>
		
	// Auto-calibrate joystick ADC outputs
	uint8_t *joy_origins;
	joy_origins = adc_joystick_autocalibrate(10);
     7b2:	8a e0       	ldi	r24, 0x0A	; 10
     7b4:	0e 94 56 02 	call	0x4ac	; 0x4ac <adc_joystick_autocalibrate>
     7b8:	ec 01       	movw	r28, r24
	printf("Sampled average origin (Joy1) = %d \n", joy_origins[0]);
     7ba:	88 81       	ld	r24, Y
     7bc:	1f 92       	push	r1
     7be:	8f 93       	push	r24
     7c0:	8e ed       	ldi	r24, 0xDE	; 222
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
	printf("Sampled average origin (Joy2) = %d \n", joy_origins[1]);
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	1f 92       	push	r1
     7d0:	8f 93       	push	r24
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
     7de:	8d b7       	in	r24, 0x3d	; 61
     7e0:	9e b7       	in	r25, 0x3e	; 62
     7e2:	08 96       	adiw	r24, 0x08	; 8
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	9e bf       	out	0x3e, r25	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	8d bf       	out	0x3d, r24	; 61

	while(1)
	{
		// Read each channel on ADC in sequence (hard-wired mode)
		sampled_value = adc_read();
		printf("Sampled value channel 0 (Joy1) = %d \n", adc_formatter(sampled_value[0], joy_origins[0]));
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f8 e2       	ldi	r31, 0x28	; 40
     7f2:	8f 2e       	mov	r8, r31
     7f4:	f3 e0       	ldi	r31, 0x03	; 3
     7f6:	9f 2e       	mov	r9, r31
     7f8:	f0 2d       	mov	r31, r0
		printf("Sampled value channel 1 (Joy2) = %d \n", adc_formatter(sampled_value[1], joy_origins[1]));
     7fa:	0f 2e       	mov	r0, r31
     7fc:	fe e4       	ldi	r31, 0x4E	; 78
     7fe:	af 2e       	mov	r10, r31
     800:	f3 e0       	ldi	r31, 0x03	; 3
     802:	bf 2e       	mov	r11, r31
     804:	f0 2d       	mov	r31, r0
		printf("Sampled value channel 2 (SliL) = %d \n", (sampled_value[2]));
     806:	0f 2e       	mov	r0, r31
     808:	f4 e7       	ldi	r31, 0x74	; 116
     80a:	cf 2e       	mov	r12, r31
     80c:	f3 e0       	ldi	r31, 0x03	; 3
     80e:	df 2e       	mov	r13, r31
     810:	f0 2d       	mov	r31, r0
		printf("Sampled value channel 3 (SliR) = %d \n", (sampled_value[3]));
     812:	0f 2e       	mov	r0, r31
     814:	fa e9       	ldi	r31, 0x9A	; 154
     816:	ef 2e       	mov	r14, r31
     818:	f3 e0       	ldi	r31, 0x03	; 3
     81a:	ff 2e       	mov	r15, r31
     81c:	f0 2d       	mov	r31, r0
	uint8_t *sampled_value;

	while(1)
	{
		// Read each channel on ADC in sequence (hard-wired mode)
		sampled_value = adc_read();
     81e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_read>
     822:	8c 01       	movw	r16, r24
		printf("Sampled value channel 0 (Joy1) = %d \n", adc_formatter(sampled_value[0], joy_origins[0]));
     824:	68 81       	ld	r22, Y
     826:	fc 01       	movw	r30, r24
     828:	80 81       	ld	r24, Z
     82a:	0e 94 ef 01 	call	0x3de	; 0x3de <adc_formatter>
     82e:	28 2f       	mov	r18, r24
     830:	08 2e       	mov	r0, r24
     832:	00 0c       	add	r0, r0
     834:	33 0b       	sbc	r19, r19
     836:	3f 93       	push	r19
     838:	8f 93       	push	r24
     83a:	9f 92       	push	r9
     83c:	8f 92       	push	r8
     83e:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
		printf("Sampled value channel 1 (Joy2) = %d \n", adc_formatter(sampled_value[1], joy_origins[1]));
     842:	69 81       	ldd	r22, Y+1	; 0x01
     844:	f8 01       	movw	r30, r16
     846:	81 81       	ldd	r24, Z+1	; 0x01
     848:	0e 94 ef 01 	call	0x3de	; 0x3de <adc_formatter>
     84c:	28 2f       	mov	r18, r24
     84e:	08 2e       	mov	r0, r24
     850:	00 0c       	add	r0, r0
     852:	33 0b       	sbc	r19, r19
     854:	3f 93       	push	r19
     856:	8f 93       	push	r24
     858:	bf 92       	push	r11
     85a:	af 92       	push	r10
     85c:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
		printf("Sampled value channel 2 (SliL) = %d \n", (sampled_value[2]));
     860:	f8 01       	movw	r30, r16
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	1f 92       	push	r1
     866:	8f 93       	push	r24
     868:	df 92       	push	r13
     86a:	cf 92       	push	r12
     86c:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
		printf("Sampled value channel 3 (SliR) = %d \n", (sampled_value[3]));
     870:	f8 01       	movw	r30, r16
     872:	83 81       	ldd	r24, Z+3	; 0x03
     874:	1f 92       	push	r1
     876:	8f 93       	push	r24
     878:	ff 92       	push	r15
     87a:	ef 92       	push	r14
     87c:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
     880:	8d b7       	in	r24, 0x3d	; 61
     882:	9e b7       	in	r25, 0x3e	; 62
     884:	40 96       	adiw	r24, 0x10	; 16
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	9e bf       	out	0x3e, r25	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	8d bf       	out	0x3d, r24	; 61
     890:	2a e0       	ldi	r18, 0x0A	; 10
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <main+0x156>
     896:	01 97       	sbiw	r24, 0x01	; 1
		
		// Delay
		for(int j=0; j<10; j++)
		{
			for(int k=0; k<30000; k++);
     898:	f1 f7       	brne	.-4      	; 0x896 <main+0x14c>
     89a:	21 50       	subi	r18, 0x01	; 1
     89c:	31 09       	sbc	r19, r1
		printf("Sampled value channel 1 (Joy2) = %d \n", adc_formatter(sampled_value[1], joy_origins[1]));
		printf("Sampled value channel 2 (SliL) = %d \n", (sampled_value[2]));
		printf("Sampled value channel 3 (SliR) = %d \n", (sampled_value[3]));
		
		// Delay
		for(int j=0; j<10; j++)
     89e:	19 f0       	breq	.+6      	; 0x8a6 <main+0x15c>
	for(int j=0; j<10; j++){
		testPrint_font(j);
	}
		
	printf("Attempting to clear OLED screen...\n");
	oled_reset();
     8a0:	80 e3       	ldi	r24, 0x30	; 48
     8a2:	95 e7       	ldi	r25, 0x75	; 117
     8a4:	f8 cf       	rjmp	.-16     	; 0x896 <main+0x14c>
		// Delay
		for(int j=0; j<10; j++)
		{
			for(int k=0; k<30000; k++);
		}
		printf("Restart from the first channel \n");
     8a6:	80 ec       	ldi	r24, 0xC0	; 192
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
	}
     8ae:	b7 cf       	rjmp	.-146    	; 0x81e <main+0xd4>

000008b0 <oled_init>:
		cmd_reg_pointer[0] = data;
	}
	
	// Write data to the graphic display data ram
	void oled_gddram_write(uint8_t data){
		gddram_pointer[0] = data;
     8b0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8b4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     8b8:	8e ea       	ldi	r24, 0xAE	; 174
     8ba:	80 83       	st	Z, r24
     8bc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8c0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     8c4:	81 ea       	ldi	r24, 0xA1	; 161
     8c6:	80 83       	st	Z, r24
     8c8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8cc:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     8d0:	8a ed       	ldi	r24, 0xDA	; 218
     8d2:	80 83       	st	Z, r24
     8d4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8d8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     8dc:	82 e1       	ldi	r24, 0x12	; 18
     8de:	80 83       	st	Z, r24
     8e0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8e4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     8e8:	88 ec       	ldi	r24, 0xC8	; 200
     8ea:	80 83       	st	Z, r24
     8ec:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8f0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     8f4:	88 ea       	ldi	r24, 0xA8	; 168
     8f6:	80 83       	st	Z, r24
     8f8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     8fc:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     900:	8f e3       	ldi	r24, 0x3F	; 63
     902:	80 83       	st	Z, r24
     904:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     908:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     90c:	85 ed       	ldi	r24, 0xD5	; 213
     90e:	80 83       	st	Z, r24
     910:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     914:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	80 83       	st	Z, r24
     91c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     920:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     924:	81 e8       	ldi	r24, 0x81	; 129
     926:	80 83       	st	Z, r24
     928:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     92c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     930:	80 e5       	ldi	r24, 0x50	; 80
     932:	80 83       	st	Z, r24
     934:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     938:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     93c:	89 ed       	ldi	r24, 0xD9	; 217
     93e:	80 83       	st	Z, r24
     940:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     944:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     948:	81 e2       	ldi	r24, 0x21	; 33
     94a:	80 83       	st	Z, r24
     94c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     950:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     954:	80 e2       	ldi	r24, 0x20	; 32
     956:	80 83       	st	Z, r24
     958:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     95c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     960:	10 82       	st	Z, r1
     962:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     966:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     96a:	8b ed       	ldi	r24, 0xDB	; 219
     96c:	80 83       	st	Z, r24
     96e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     972:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     976:	80 e3       	ldi	r24, 0x30	; 48
     978:	80 83       	st	Z, r24
     97a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     97e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     982:	8d ea       	ldi	r24, 0xAD	; 173
     984:	80 83       	st	Z, r24
     986:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     98a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     98e:	10 82       	st	Z, r1
     990:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     994:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     998:	84 ea       	ldi	r24, 0xA4	; 164
     99a:	80 83       	st	Z, r24
     99c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9a0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9a4:	86 ea       	ldi	r24, 0xA6	; 166
     9a6:	80 83       	st	Z, r24
     9a8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9ac:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9b0:	8f ea       	ldi	r24, 0xAF	; 175
     9b2:	80 83       	st	Z, r24
     9b4:	08 95       	ret

000009b6 <set_addressing_mode>:
     9b6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9ba:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9be:	90 e2       	ldi	r25, 0x20	; 32
     9c0:	90 83       	st	Z, r25
     9c2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9c6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9ca:	80 83       	st	Z, r24
     9cc:	08 95       	ret

000009ce <set_column_address_range>:
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	d8 2f       	mov	r29, r24
     9d4:	c6 2f       	mov	r28, r22
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_addressing_mode>
     9dc:	cd 17       	cp	r28, r29
     9de:	88 f0       	brcs	.+34     	; 0xa02 <set_column_address_range+0x34>
     9e0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9e4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9e8:	81 e2       	ldi	r24, 0x21	; 33
     9ea:	80 83       	st	Z, r24
     9ec:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9f0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9f4:	d0 83       	st	Z, r29
     9f6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     9fa:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     9fe:	c0 83       	st	Z, r28
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <set_column_address_range+0x3c>
     a02:	80 ee       	ldi	r24, 0xE0	; 224
     a04:	93 e0       	ldi	r25, 0x03	; 3
     a06:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <oled_goto_column>:
     a10:	cf 93       	push	r28
     a12:	c8 2f       	mov	r28, r24
     a14:	88 23       	and	r24, r24
     a16:	2c f4       	brge	.+10     	; 0xa22 <oled_goto_column+0x12>
     a18:	85 e2       	ldi	r24, 0x25	; 37
     a1a:	94 e0       	ldi	r25, 0x04	; 4
     a1c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <oled_goto_column+0x1c>
     a22:	6f e7       	ldi	r22, 0x7F	; 127
     a24:	0e 94 e7 04 	call	0x9ce	; 0x9ce <set_column_address_range>
     a28:	c0 93 f2 04 	sts	0x04F2, r28	; 0x8004f2 <Position>
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <set_page_address_range>:
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	d8 2f       	mov	r29, r24
     a36:	c6 2f       	mov	r28, r22
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_addressing_mode>
     a3e:	cd 17       	cp	r28, r29
     a40:	88 f0       	brcs	.+34     	; 0xa64 <set_page_address_range+0x34>
     a42:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     a46:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     a4a:	82 e2       	ldi	r24, 0x22	; 34
     a4c:	80 83       	st	Z, r24
     a4e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     a52:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     a56:	d0 83       	st	Z, r29
     a58:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <cmd_reg_pointer>
     a5c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <cmd_reg_pointer+0x1>
     a60:	c0 83       	st	Z, r28
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <set_page_address_range+0x3c>
     a64:	8a e5       	ldi	r24, 0x5A	; 90
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <oled_goto_page>:
     a72:	cf 93       	push	r28
     a74:	c8 2f       	mov	r28, r24
     a76:	88 30       	cpi	r24, 0x08	; 8
     a78:	28 f0       	brcs	.+10     	; 0xa84 <oled_goto_page+0x12>
     a7a:	8d e9       	ldi	r24, 0x9D	; 157
     a7c:	94 e0       	ldi	r25, 0x04	; 4
     a7e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <puts>
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <oled_goto_page+0x1c>
     a84:	67 e0       	ldi	r22, 0x07	; 7
     a86:	0e 94 18 05 	call	0xa30	; 0xa30 <set_page_address_range>
     a8a:	c0 93 f3 04 	sts	0x04F3, r28	; 0x8004f3 <Position+0x1>
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <oled_set_cursor_pos>:
     a92:	cf 93       	push	r28
     a94:	c6 2f       	mov	r28, r22
     a96:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_goto_page>
     a9a:	8c 2f       	mov	r24, r28
     a9c:	0e 94 08 05 	call	0xa10	; 0xa10 <oled_goto_column>
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <oled_clear_page>:
     aa4:	cf 93       	push	r28
     aa6:	c8 2f       	mov	r28, r24
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	0e 94 49 05 	call	0xa92	; 0xa92 <oled_set_cursor_pos>
     aae:	80 e8       	ldi	r24, 0x80	; 128
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <gddram_pointer>
     ab6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <gddram_pointer+0x1>
     aba:	10 82       	st	Z, r1
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	c9 f7       	brne	.-14     	; 0xab2 <oled_clear_page+0xe>
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	8c 2f       	mov	r24, r28
     ac4:	0e 94 49 05 	call	0xa92	; 0xa92 <oled_set_cursor_pos>
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <oled_cursor_home>:
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 49 05 	call	0xa92	; 0xa92 <oled_set_cursor_pos>
     ad4:	08 95       	ret

00000ad6 <oled_reset>:
     ad6:	cf 93       	push	r28
     ad8:	c0 e0       	ldi	r28, 0x00	; 0
     ada:	8c 2f       	mov	r24, r28
     adc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <oled_clear_page>
     ae0:	cf 5f       	subi	r28, 0xFF	; 255
     ae2:	c8 30       	cpi	r28, 0x08	; 8
     ae4:	d1 f7       	brne	.-12     	; 0xada <oled_reset+0x4>
     ae6:	0e 94 66 05 	call	0xacc	; 0xacc <oled_cursor_home>
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <testPrint_font>:
		oled_gddram_write(0b00111100);
		oled_gddram_write(0b00011000);
	}
		
	
	void testPrint_font(uint8_t ch){
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	98 e0       	ldi	r25, 0x08	; 8
     afc:	89 9f       	mul	r24, r25
     afe:	70 01       	movw	r14, r0
     b00:	11 24       	eor	r1, r1
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < sizeof(font8[ch]); i++){
			printf("Element of index %d = %d:\n", i, pgm_read_word(&font8[ch][i]));
     b06:	00 ed       	ldi	r16, 0xD0	; 208
     b08:	14 e0       	ldi	r17, 0x04	; 4
     b0a:	fe 01       	movw	r30, r28
     b0c:	ee 0d       	add	r30, r14
     b0e:	ff 1d       	adc	r31, r15
     b10:	e0 59       	subi	r30, 0x90	; 144
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	85 91       	lpm	r24, Z+
     b16:	94 91       	lpm	r25, Z
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	1f 93       	push	r17
     b22:	0f 93       	push	r16
     b24:	0e 94 89 06 	call	0xd12	; 0xd12 <printf>
		oled_gddram_write(0b00011000);
	}
		
	
	void testPrint_font(uint8_t ch){
		for(int i=0; i < sizeof(font8[ch]); i++){
     b28:	21 96       	adiw	r28, 0x01	; 1
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	c8 30       	cpi	r28, 0x08	; 8
     b38:	d1 05       	cpc	r29, r1
     b3a:	39 f7       	brne	.-50     	; 0xb0a <testPrint_font+0x1c>
			printf("Element of index %d = %d:\n", i, pgm_read_word(&font8[ch][i]));
		}
	}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <USART_Transmit>:
#include <USART_Driver.h>

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     b4a:	5d 9b       	sbis	0x0b, 5	; 11
     b4c:	fe cf       	rjmp	.-4      	; 0xb4a <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     b4e:	8c b9       	out	0x0c, r24	; 12
     b50:	08 95       	ret

00000b52 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     b52:	5f 9b       	sbis	0x0b, 7	; 11
     b54:	fe cf       	rjmp	.-4      	; 0xb52 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
     b56:	8c b1       	in	r24, 0x0c	; 12
}
     b58:	08 95       	ret

00000b5a <USART_init>:

void USART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr>>8);
     b5a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
     b5c:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     b5e:	88 e1       	ldi	r24, 0x18	; 24
     b60:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     b62:	8e e8       	ldi	r24, 0x8E	; 142
     b64:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
     b66:	69 ea       	ldi	r22, 0xA9	; 169
     b68:	75 e0       	ldi	r23, 0x05	; 5
     b6a:	85 ea       	ldi	r24, 0xA5	; 165
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fdevopen>
     b72:	08 95       	ret

00000b74 <__divmodhi4>:
     b74:	97 fb       	bst	r25, 7
     b76:	07 2e       	mov	r0, r23
     b78:	16 f4       	brtc	.+4      	; 0xb7e <__divmodhi4+0xa>
     b7a:	00 94       	com	r0
     b7c:	07 d0       	rcall	.+14     	; 0xb8c <__divmodhi4_neg1>
     b7e:	77 fd       	sbrc	r23, 7
     b80:	09 d0       	rcall	.+18     	; 0xb94 <__divmodhi4_neg2>
     b82:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__udivmodhi4>
     b86:	07 fc       	sbrc	r0, 7
     b88:	05 d0       	rcall	.+10     	; 0xb94 <__divmodhi4_neg2>
     b8a:	3e f4       	brtc	.+14     	; 0xb9a <__divmodhi4_exit>

00000b8c <__divmodhi4_neg1>:
     b8c:	90 95       	com	r25
     b8e:	81 95       	neg	r24
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	08 95       	ret

00000b94 <__divmodhi4_neg2>:
     b94:	70 95       	com	r23
     b96:	61 95       	neg	r22
     b98:	7f 4f       	sbci	r23, 0xFF	; 255

00000b9a <__divmodhi4_exit>:
     b9a:	08 95       	ret

00000b9c <__udivmodhi4>:
     b9c:	aa 1b       	sub	r26, r26
     b9e:	bb 1b       	sub	r27, r27
     ba0:	51 e1       	ldi	r21, 0x11	; 17
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <__udivmodhi4_ep>

00000ba4 <__udivmodhi4_loop>:
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	a6 17       	cp	r26, r22
     baa:	b7 07       	cpc	r27, r23
     bac:	10 f0       	brcs	.+4      	; 0xbb2 <__udivmodhi4_ep>
     bae:	a6 1b       	sub	r26, r22
     bb0:	b7 0b       	sbc	r27, r23

00000bb2 <__udivmodhi4_ep>:
     bb2:	88 1f       	adc	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	5a 95       	dec	r21
     bb8:	a9 f7       	brne	.-22     	; 0xba4 <__udivmodhi4_loop>
     bba:	80 95       	com	r24
     bbc:	90 95       	com	r25
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	08 95       	ret

00000bc4 <do_rand>:
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ec 01       	movw	r28, r24
     bda:	68 81       	ld	r22, Y
     bdc:	79 81       	ldd	r23, Y+1	; 0x01
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	61 15       	cp	r22, r1
     be4:	71 05       	cpc	r23, r1
     be6:	81 05       	cpc	r24, r1
     be8:	91 05       	cpc	r25, r1
     bea:	21 f4       	brne	.+8      	; 0xbf4 <do_rand+0x30>
     bec:	64 e2       	ldi	r22, 0x24	; 36
     bee:	79 ed       	ldi	r23, 0xD9	; 217
     bf0:	8b e5       	ldi	r24, 0x5B	; 91
     bf2:	97 e0       	ldi	r25, 0x07	; 7
     bf4:	2d e1       	ldi	r18, 0x1D	; 29
     bf6:	33 ef       	ldi	r19, 0xF3	; 243
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__divmodsi4>
     c00:	49 01       	movw	r8, r18
     c02:	5a 01       	movw	r10, r20
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	a7 ea       	ldi	r26, 0xA7	; 167
     c0a:	b1 e4       	ldi	r27, 0x41	; 65
     c0c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__muluhisi3>
     c10:	6b 01       	movw	r12, r22
     c12:	7c 01       	movw	r14, r24
     c14:	ac ee       	ldi	r26, 0xEC	; 236
     c16:	b4 ef       	ldi	r27, 0xF4	; 244
     c18:	a5 01       	movw	r20, r10
     c1a:	94 01       	movw	r18, r8
     c1c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulohisi3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	8c 0d       	add	r24, r12
     c26:	9d 1d       	adc	r25, r13
     c28:	ae 1d       	adc	r26, r14
     c2a:	bf 1d       	adc	r27, r15
     c2c:	b7 ff       	sbrs	r27, 7
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <do_rand+0x72>
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	a1 09       	sbc	r26, r1
     c34:	b0 48       	sbci	r27, 0x80	; 128
     c36:	88 83       	st	Y, r24
     c38:	99 83       	std	Y+1, r25	; 0x01
     c3a:	aa 83       	std	Y+2, r26	; 0x02
     c3c:	bb 83       	std	Y+3, r27	; 0x03
     c3e:	9f 77       	andi	r25, 0x7F	; 127
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	08 95       	ret

00000c56 <rand_r>:
     c56:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <do_rand>
     c5a:	08 95       	ret

00000c5c <rand>:
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <do_rand>
     c64:	08 95       	ret

00000c66 <srand>:
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c6e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c72:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     c76:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     c7a:	08 95       	ret

00000c7c <fdevopen>:
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	31 f4       	brne	.+12     	; 0xc94 <fdevopen+0x18>
     c88:	61 15       	cp	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	19 f4       	brne	.+6      	; 0xc94 <fdevopen+0x18>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	3a c0       	rjmp	.+116    	; 0xd08 <fdevopen+0x8c>
     c94:	8b 01       	movw	r16, r22
     c96:	ec 01       	movw	r28, r24
     c98:	6e e0       	ldi	r22, 0x0E	; 14
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 b0 08 	call	0x1160	; 0x1160 <calloc>
     ca4:	fc 01       	movw	r30, r24
     ca6:	89 2b       	or	r24, r25
     ca8:	91 f3       	breq	.-28     	; 0xc8e <fdevopen+0x12>
     caa:	80 e8       	ldi	r24, 0x80	; 128
     cac:	83 83       	std	Z+3, r24	; 0x03
     cae:	01 15       	cp	r16, r1
     cb0:	11 05       	cpc	r17, r1
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <fdevopen+0x54>
     cb4:	13 87       	std	Z+11, r17	; 0x0b
     cb6:	02 87       	std	Z+10, r16	; 0x0a
     cb8:	81 e8       	ldi	r24, 0x81	; 129
     cba:	83 83       	std	Z+3, r24	; 0x03
     cbc:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <__iob>
     cc0:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <__iob+0x1>
     cc4:	89 2b       	or	r24, r25
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <fdevopen+0x54>
     cc8:	f0 93 f5 04 	sts	0x04F5, r31	; 0x8004f5 <__iob+0x1>
     ccc:	e0 93 f4 04 	sts	0x04F4, r30	; 0x8004f4 <__iob>
     cd0:	20 97       	sbiw	r28, 0x00	; 0
     cd2:	c9 f0       	breq	.+50     	; 0xd06 <fdevopen+0x8a>
     cd4:	d1 87       	std	Z+9, r29	; 0x09
     cd6:	c0 87       	std	Z+8, r28	; 0x08
     cd8:	83 81       	ldd	r24, Z+3	; 0x03
     cda:	82 60       	ori	r24, 0x02	; 2
     cdc:	83 83       	std	Z+3, r24	; 0x03
     cde:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <__iob+0x2>
     ce2:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <__iob+0x3>
     ce6:	89 2b       	or	r24, r25
     ce8:	71 f4       	brne	.+28     	; 0xd06 <fdevopen+0x8a>
     cea:	f0 93 f7 04 	sts	0x04F7, r31	; 0x8004f7 <__iob+0x3>
     cee:	e0 93 f6 04 	sts	0x04F6, r30	; 0x8004f6 <__iob+0x2>
     cf2:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <__iob+0x4>
     cf6:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <__iob+0x5>
     cfa:	89 2b       	or	r24, r25
     cfc:	21 f4       	brne	.+8      	; 0xd06 <fdevopen+0x8a>
     cfe:	f0 93 f9 04 	sts	0x04F9, r31	; 0x8004f9 <__iob+0x5>
     d02:	e0 93 f8 04 	sts	0x04F8, r30	; 0x8004f8 <__iob+0x4>
     d06:	cf 01       	movw	r24, r30
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <printf>:
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ef e8       	ldi	r30, 0x8F	; 143
     d18:	f6 e0       	ldi	r31, 0x06	; 6
     d1a:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__prologue_saves__+0x20>
     d1e:	ae 01       	movw	r20, r28
     d20:	4b 5f       	subi	r20, 0xFB	; 251
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	fa 01       	movw	r30, r20
     d26:	61 91       	ld	r22, Z+
     d28:	71 91       	ld	r23, Z+
     d2a:	af 01       	movw	r20, r30
     d2c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <__iob+0x2>
     d30:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <__iob+0x3>
     d34:	0e 94 cf 06 	call	0xd9e	; 0xd9e <vfprintf>
     d38:	e2 e0       	ldi	r30, 0x02	; 2
     d3a:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__epilogue_restores__+0x20>

00000d3e <puts>:
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <__iob+0x2>
     d4a:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <__iob+0x3>
     d4e:	23 81       	ldd	r18, Z+3	; 0x03
     d50:	21 ff       	sbrs	r18, 1
     d52:	1b c0       	rjmp	.+54     	; 0xd8a <puts+0x4c>
     d54:	8c 01       	movw	r16, r24
     d56:	d0 e0       	ldi	r29, 0x00	; 0
     d58:	c0 e0       	ldi	r28, 0x00	; 0
     d5a:	f8 01       	movw	r30, r16
     d5c:	81 91       	ld	r24, Z+
     d5e:	8f 01       	movw	r16, r30
     d60:	60 91 f6 04 	lds	r22, 0x04F6	; 0x8004f6 <__iob+0x2>
     d64:	70 91 f7 04 	lds	r23, 0x04F7	; 0x8004f7 <__iob+0x3>
     d68:	db 01       	movw	r26, r22
     d6a:	18 96       	adiw	r26, 0x08	; 8
     d6c:	ed 91       	ld	r30, X+
     d6e:	fc 91       	ld	r31, X
     d70:	19 97       	sbiw	r26, 0x09	; 9
     d72:	88 23       	and	r24, r24
     d74:	31 f0       	breq	.+12     	; 0xd82 <puts+0x44>
     d76:	09 95       	icall
     d78:	89 2b       	or	r24, r25
     d7a:	79 f3       	breq	.-34     	; 0xd5a <puts+0x1c>
     d7c:	df ef       	ldi	r29, 0xFF	; 255
     d7e:	cf ef       	ldi	r28, 0xFF	; 255
     d80:	ec cf       	rjmp	.-40     	; 0xd5a <puts+0x1c>
     d82:	8a e0       	ldi	r24, 0x0A	; 10
     d84:	09 95       	icall
     d86:	89 2b       	or	r24, r25
     d88:	19 f0       	breq	.+6      	; 0xd90 <puts+0x52>
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <puts+0x56>
     d90:	8d 2f       	mov	r24, r29
     d92:	9c 2f       	mov	r25, r28
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	08 95       	ret

00000d9e <vfprintf>:
     d9e:	ab e0       	ldi	r26, 0x0B	; 11
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 ed       	ldi	r30, 0xD5	; 213
     da4:	f6 e0       	ldi	r31, 0x06	; 6
     da6:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__prologue_saves__>
     daa:	6c 01       	movw	r12, r24
     dac:	7b 01       	movw	r14, r22
     dae:	8a 01       	movw	r16, r20
     db0:	fc 01       	movw	r30, r24
     db2:	17 82       	std	Z+7, r1	; 0x07
     db4:	16 82       	std	Z+6, r1	; 0x06
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	81 ff       	sbrs	r24, 1
     dba:	cc c1       	rjmp	.+920    	; 0x1154 <vfprintf+0x3b6>
     dbc:	ce 01       	movw	r24, r28
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	3c 01       	movw	r6, r24
     dc2:	f6 01       	movw	r30, r12
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	f7 01       	movw	r30, r14
     dc8:	93 fd       	sbrc	r25, 3
     dca:	85 91       	lpm	r24, Z+
     dcc:	93 ff       	sbrs	r25, 3
     dce:	81 91       	ld	r24, Z+
     dd0:	7f 01       	movw	r14, r30
     dd2:	88 23       	and	r24, r24
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <vfprintf+0x3a>
     dd6:	ba c1       	rjmp	.+884    	; 0x114c <vfprintf+0x3ae>
     dd8:	85 32       	cpi	r24, 0x25	; 37
     dda:	39 f4       	brne	.+14     	; 0xdea <vfprintf+0x4c>
     ddc:	93 fd       	sbrc	r25, 3
     dde:	85 91       	lpm	r24, Z+
     de0:	93 ff       	sbrs	r25, 3
     de2:	81 91       	ld	r24, Z+
     de4:	7f 01       	movw	r14, r30
     de6:	85 32       	cpi	r24, 0x25	; 37
     de8:	29 f4       	brne	.+10     	; 0xdf4 <vfprintf+0x56>
     dea:	b6 01       	movw	r22, r12
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
     df2:	e7 cf       	rjmp	.-50     	; 0xdc2 <vfprintf+0x24>
     df4:	91 2c       	mov	r9, r1
     df6:	21 2c       	mov	r2, r1
     df8:	31 2c       	mov	r3, r1
     dfa:	ff e1       	ldi	r31, 0x1F	; 31
     dfc:	f3 15       	cp	r31, r3
     dfe:	d8 f0       	brcs	.+54     	; 0xe36 <vfprintf+0x98>
     e00:	8b 32       	cpi	r24, 0x2B	; 43
     e02:	79 f0       	breq	.+30     	; 0xe22 <vfprintf+0x84>
     e04:	38 f4       	brcc	.+14     	; 0xe14 <vfprintf+0x76>
     e06:	80 32       	cpi	r24, 0x20	; 32
     e08:	79 f0       	breq	.+30     	; 0xe28 <vfprintf+0x8a>
     e0a:	83 32       	cpi	r24, 0x23	; 35
     e0c:	a1 f4       	brne	.+40     	; 0xe36 <vfprintf+0x98>
     e0e:	23 2d       	mov	r18, r3
     e10:	20 61       	ori	r18, 0x10	; 16
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <vfprintf+0xb0>
     e14:	8d 32       	cpi	r24, 0x2D	; 45
     e16:	61 f0       	breq	.+24     	; 0xe30 <vfprintf+0x92>
     e18:	80 33       	cpi	r24, 0x30	; 48
     e1a:	69 f4       	brne	.+26     	; 0xe36 <vfprintf+0x98>
     e1c:	23 2d       	mov	r18, r3
     e1e:	21 60       	ori	r18, 0x01	; 1
     e20:	16 c0       	rjmp	.+44     	; 0xe4e <vfprintf+0xb0>
     e22:	83 2d       	mov	r24, r3
     e24:	82 60       	ori	r24, 0x02	; 2
     e26:	38 2e       	mov	r3, r24
     e28:	e3 2d       	mov	r30, r3
     e2a:	e4 60       	ori	r30, 0x04	; 4
     e2c:	3e 2e       	mov	r3, r30
     e2e:	2a c0       	rjmp	.+84     	; 0xe84 <vfprintf+0xe6>
     e30:	f3 2d       	mov	r31, r3
     e32:	f8 60       	ori	r31, 0x08	; 8
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <vfprintf+0xd2>
     e36:	37 fc       	sbrc	r3, 7
     e38:	2d c0       	rjmp	.+90     	; 0xe94 <vfprintf+0xf6>
     e3a:	20 ed       	ldi	r18, 0xD0	; 208
     e3c:	28 0f       	add	r18, r24
     e3e:	2a 30       	cpi	r18, 0x0A	; 10
     e40:	40 f0       	brcs	.+16     	; 0xe52 <vfprintf+0xb4>
     e42:	8e 32       	cpi	r24, 0x2E	; 46
     e44:	b9 f4       	brne	.+46     	; 0xe74 <vfprintf+0xd6>
     e46:	36 fc       	sbrc	r3, 6
     e48:	81 c1       	rjmp	.+770    	; 0x114c <vfprintf+0x3ae>
     e4a:	23 2d       	mov	r18, r3
     e4c:	20 64       	ori	r18, 0x40	; 64
     e4e:	32 2e       	mov	r3, r18
     e50:	19 c0       	rjmp	.+50     	; 0xe84 <vfprintf+0xe6>
     e52:	36 fe       	sbrs	r3, 6
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0xc4>
     e56:	8a e0       	ldi	r24, 0x0A	; 10
     e58:	98 9e       	mul	r9, r24
     e5a:	20 0d       	add	r18, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	92 2e       	mov	r9, r18
     e60:	11 c0       	rjmp	.+34     	; 0xe84 <vfprintf+0xe6>
     e62:	ea e0       	ldi	r30, 0x0A	; 10
     e64:	2e 9e       	mul	r2, r30
     e66:	20 0d       	add	r18, r0
     e68:	11 24       	eor	r1, r1
     e6a:	22 2e       	mov	r2, r18
     e6c:	f3 2d       	mov	r31, r3
     e6e:	f0 62       	ori	r31, 0x20	; 32
     e70:	3f 2e       	mov	r3, r31
     e72:	08 c0       	rjmp	.+16     	; 0xe84 <vfprintf+0xe6>
     e74:	8c 36       	cpi	r24, 0x6C	; 108
     e76:	21 f4       	brne	.+8      	; 0xe80 <vfprintf+0xe2>
     e78:	83 2d       	mov	r24, r3
     e7a:	80 68       	ori	r24, 0x80	; 128
     e7c:	38 2e       	mov	r3, r24
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <vfprintf+0xe6>
     e80:	88 36       	cpi	r24, 0x68	; 104
     e82:	41 f4       	brne	.+16     	; 0xe94 <vfprintf+0xf6>
     e84:	f7 01       	movw	r30, r14
     e86:	93 fd       	sbrc	r25, 3
     e88:	85 91       	lpm	r24, Z+
     e8a:	93 ff       	sbrs	r25, 3
     e8c:	81 91       	ld	r24, Z+
     e8e:	7f 01       	movw	r14, r30
     e90:	81 11       	cpse	r24, r1
     e92:	b3 cf       	rjmp	.-154    	; 0xdfa <vfprintf+0x5c>
     e94:	98 2f       	mov	r25, r24
     e96:	9f 7d       	andi	r25, 0xDF	; 223
     e98:	95 54       	subi	r25, 0x45	; 69
     e9a:	93 30       	cpi	r25, 0x03	; 3
     e9c:	28 f4       	brcc	.+10     	; 0xea8 <vfprintf+0x10a>
     e9e:	0c 5f       	subi	r16, 0xFC	; 252
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	9f e3       	ldi	r25, 0x3F	; 63
     ea4:	99 83       	std	Y+1, r25	; 0x01
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <vfprintf+0x124>
     ea8:	83 36       	cpi	r24, 0x63	; 99
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <vfprintf+0x11a>
     eac:	83 37       	cpi	r24, 0x73	; 115
     eae:	71 f0       	breq	.+28     	; 0xecc <vfprintf+0x12e>
     eb0:	83 35       	cpi	r24, 0x53	; 83
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <vfprintf+0x118>
     eb4:	59 c0       	rjmp	.+178    	; 0xf68 <vfprintf+0x1ca>
     eb6:	21 c0       	rjmp	.+66     	; 0xefa <vfprintf+0x15c>
     eb8:	f8 01       	movw	r30, r16
     eba:	80 81       	ld	r24, Z
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	0e 5f       	subi	r16, 0xFE	; 254
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	88 24       	eor	r8, r8
     ec4:	83 94       	inc	r8
     ec6:	91 2c       	mov	r9, r1
     ec8:	53 01       	movw	r10, r6
     eca:	13 c0       	rjmp	.+38     	; 0xef2 <vfprintf+0x154>
     ecc:	28 01       	movw	r4, r16
     ece:	f2 e0       	ldi	r31, 0x02	; 2
     ed0:	4f 0e       	add	r4, r31
     ed2:	51 1c       	adc	r5, r1
     ed4:	f8 01       	movw	r30, r16
     ed6:	a0 80       	ld	r10, Z
     ed8:	b1 80       	ldd	r11, Z+1	; 0x01
     eda:	36 fe       	sbrs	r3, 6
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <vfprintf+0x146>
     ede:	69 2d       	mov	r22, r9
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <vfprintf+0x14a>
     ee4:	6f ef       	ldi	r22, 0xFF	; 255
     ee6:	7f ef       	ldi	r23, 0xFF	; 255
     ee8:	c5 01       	movw	r24, r10
     eea:	0e 94 ff 09 	call	0x13fe	; 0x13fe <strnlen>
     eee:	4c 01       	movw	r8, r24
     ef0:	82 01       	movw	r16, r4
     ef2:	f3 2d       	mov	r31, r3
     ef4:	ff 77       	andi	r31, 0x7F	; 127
     ef6:	3f 2e       	mov	r3, r31
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <vfprintf+0x188>
     efa:	28 01       	movw	r4, r16
     efc:	22 e0       	ldi	r18, 0x02	; 2
     efe:	42 0e       	add	r4, r18
     f00:	51 1c       	adc	r5, r1
     f02:	f8 01       	movw	r30, r16
     f04:	a0 80       	ld	r10, Z
     f06:	b1 80       	ldd	r11, Z+1	; 0x01
     f08:	36 fe       	sbrs	r3, 6
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x174>
     f0c:	69 2d       	mov	r22, r9
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x178>
     f12:	6f ef       	ldi	r22, 0xFF	; 255
     f14:	7f ef       	ldi	r23, 0xFF	; 255
     f16:	c5 01       	movw	r24, r10
     f18:	0e 94 ed 09 	call	0x13da	; 0x13da <strnlen_P>
     f1c:	4c 01       	movw	r8, r24
     f1e:	f3 2d       	mov	r31, r3
     f20:	f0 68       	ori	r31, 0x80	; 128
     f22:	3f 2e       	mov	r3, r31
     f24:	82 01       	movw	r16, r4
     f26:	33 fc       	sbrc	r3, 3
     f28:	1b c0       	rjmp	.+54     	; 0xf60 <vfprintf+0x1c2>
     f2a:	82 2d       	mov	r24, r2
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	88 16       	cp	r8, r24
     f30:	99 06       	cpc	r9, r25
     f32:	b0 f4       	brcc	.+44     	; 0xf60 <vfprintf+0x1c2>
     f34:	b6 01       	movw	r22, r12
     f36:	80 e2       	ldi	r24, 0x20	; 32
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
     f3e:	2a 94       	dec	r2
     f40:	f4 cf       	rjmp	.-24     	; 0xf2a <vfprintf+0x18c>
     f42:	f5 01       	movw	r30, r10
     f44:	37 fc       	sbrc	r3, 7
     f46:	85 91       	lpm	r24, Z+
     f48:	37 fe       	sbrs	r3, 7
     f4a:	81 91       	ld	r24, Z+
     f4c:	5f 01       	movw	r10, r30
     f4e:	b6 01       	movw	r22, r12
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
     f56:	21 10       	cpse	r2, r1
     f58:	2a 94       	dec	r2
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	82 1a       	sub	r8, r18
     f5e:	91 08       	sbc	r9, r1
     f60:	81 14       	cp	r8, r1
     f62:	91 04       	cpc	r9, r1
     f64:	71 f7       	brne	.-36     	; 0xf42 <vfprintf+0x1a4>
     f66:	e8 c0       	rjmp	.+464    	; 0x1138 <vfprintf+0x39a>
     f68:	84 36       	cpi	r24, 0x64	; 100
     f6a:	11 f0       	breq	.+4      	; 0xf70 <vfprintf+0x1d2>
     f6c:	89 36       	cpi	r24, 0x69	; 105
     f6e:	41 f5       	brne	.+80     	; 0xfc0 <vfprintf+0x222>
     f70:	f8 01       	movw	r30, r16
     f72:	37 fe       	sbrs	r3, 7
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <vfprintf+0x1e6>
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	0c 5f       	subi	r16, 0xFC	; 252
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <vfprintf+0x1f6>
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	07 2e       	mov	r0, r23
     f8a:	00 0c       	add	r0, r0
     f8c:	88 0b       	sbc	r24, r24
     f8e:	99 0b       	sbc	r25, r25
     f90:	0e 5f       	subi	r16, 0xFE	; 254
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	f3 2d       	mov	r31, r3
     f96:	ff 76       	andi	r31, 0x6F	; 111
     f98:	3f 2e       	mov	r3, r31
     f9a:	97 ff       	sbrs	r25, 7
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <vfprintf+0x212>
     f9e:	90 95       	com	r25
     fa0:	80 95       	com	r24
     fa2:	70 95       	com	r23
     fa4:	61 95       	neg	r22
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	f0 68       	ori	r31, 0x80	; 128
     fae:	3f 2e       	mov	r3, r31
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	a3 01       	movw	r20, r6
     fb6:	0e 94 46 0a 	call	0x148c	; 0x148c <__ultoa_invert>
     fba:	88 2e       	mov	r8, r24
     fbc:	86 18       	sub	r8, r6
     fbe:	45 c0       	rjmp	.+138    	; 0x104a <vfprintf+0x2ac>
     fc0:	85 37       	cpi	r24, 0x75	; 117
     fc2:	31 f4       	brne	.+12     	; 0xfd0 <vfprintf+0x232>
     fc4:	23 2d       	mov	r18, r3
     fc6:	2f 7e       	andi	r18, 0xEF	; 239
     fc8:	b2 2e       	mov	r11, r18
     fca:	2a e0       	ldi	r18, 0x0A	; 10
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	25 c0       	rjmp	.+74     	; 0x101a <vfprintf+0x27c>
     fd0:	93 2d       	mov	r25, r3
     fd2:	99 7f       	andi	r25, 0xF9	; 249
     fd4:	b9 2e       	mov	r11, r25
     fd6:	8f 36       	cpi	r24, 0x6F	; 111
     fd8:	c1 f0       	breq	.+48     	; 0x100a <vfprintf+0x26c>
     fda:	18 f4       	brcc	.+6      	; 0xfe2 <vfprintf+0x244>
     fdc:	88 35       	cpi	r24, 0x58	; 88
     fde:	79 f0       	breq	.+30     	; 0xffe <vfprintf+0x260>
     fe0:	b5 c0       	rjmp	.+362    	; 0x114c <vfprintf+0x3ae>
     fe2:	80 37       	cpi	r24, 0x70	; 112
     fe4:	19 f0       	breq	.+6      	; 0xfec <vfprintf+0x24e>
     fe6:	88 37       	cpi	r24, 0x78	; 120
     fe8:	21 f0       	breq	.+8      	; 0xff2 <vfprintf+0x254>
     fea:	b0 c0       	rjmp	.+352    	; 0x114c <vfprintf+0x3ae>
     fec:	e9 2f       	mov	r30, r25
     fee:	e0 61       	ori	r30, 0x10	; 16
     ff0:	be 2e       	mov	r11, r30
     ff2:	b4 fe       	sbrs	r11, 4
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <vfprintf+0x272>
     ff6:	fb 2d       	mov	r31, r11
     ff8:	f4 60       	ori	r31, 0x04	; 4
     ffa:	bf 2e       	mov	r11, r31
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <vfprintf+0x272>
     ffe:	34 fe       	sbrs	r3, 4
    1000:	0a c0       	rjmp	.+20     	; 0x1016 <vfprintf+0x278>
    1002:	29 2f       	mov	r18, r25
    1004:	26 60       	ori	r18, 0x06	; 6
    1006:	b2 2e       	mov	r11, r18
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x278>
    100a:	28 e0       	ldi	r18, 0x08	; 8
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	05 c0       	rjmp	.+10     	; 0x101a <vfprintf+0x27c>
    1010:	20 e1       	ldi	r18, 0x10	; 16
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x27c>
    1016:	20 e1       	ldi	r18, 0x10	; 16
    1018:	32 e0       	ldi	r19, 0x02	; 2
    101a:	f8 01       	movw	r30, r16
    101c:	b7 fe       	sbrs	r11, 7
    101e:	07 c0       	rjmp	.+14     	; 0x102e <vfprintf+0x290>
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	0c 5f       	subi	r16, 0xFC	; 252
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	06 c0       	rjmp	.+12     	; 0x103a <vfprintf+0x29c>
    102e:	60 81       	ld	r22, Z
    1030:	71 81       	ldd	r23, Z+1	; 0x01
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 5f       	subi	r16, 0xFE	; 254
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	a3 01       	movw	r20, r6
    103c:	0e 94 46 0a 	call	0x148c	; 0x148c <__ultoa_invert>
    1040:	88 2e       	mov	r8, r24
    1042:	86 18       	sub	r8, r6
    1044:	fb 2d       	mov	r31, r11
    1046:	ff 77       	andi	r31, 0x7F	; 127
    1048:	3f 2e       	mov	r3, r31
    104a:	36 fe       	sbrs	r3, 6
    104c:	0d c0       	rjmp	.+26     	; 0x1068 <vfprintf+0x2ca>
    104e:	23 2d       	mov	r18, r3
    1050:	2e 7f       	andi	r18, 0xFE	; 254
    1052:	a2 2e       	mov	r10, r18
    1054:	89 14       	cp	r8, r9
    1056:	58 f4       	brcc	.+22     	; 0x106e <vfprintf+0x2d0>
    1058:	34 fe       	sbrs	r3, 4
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <vfprintf+0x2d4>
    105c:	32 fc       	sbrc	r3, 2
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <vfprintf+0x2d4>
    1060:	83 2d       	mov	r24, r3
    1062:	8e 7e       	andi	r24, 0xEE	; 238
    1064:	a8 2e       	mov	r10, r24
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <vfprintf+0x2d4>
    1068:	b8 2c       	mov	r11, r8
    106a:	a3 2c       	mov	r10, r3
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <vfprintf+0x2d6>
    106e:	b8 2c       	mov	r11, r8
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <vfprintf+0x2d6>
    1072:	b9 2c       	mov	r11, r9
    1074:	a4 fe       	sbrs	r10, 4
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <vfprintf+0x2f8>
    1078:	fe 01       	movw	r30, r28
    107a:	e8 0d       	add	r30, r8
    107c:	f1 1d       	adc	r31, r1
    107e:	80 81       	ld	r24, Z
    1080:	80 33       	cpi	r24, 0x30	; 48
    1082:	21 f4       	brne	.+8      	; 0x108c <vfprintf+0x2ee>
    1084:	9a 2d       	mov	r25, r10
    1086:	99 7e       	andi	r25, 0xE9	; 233
    1088:	a9 2e       	mov	r10, r25
    108a:	09 c0       	rjmp	.+18     	; 0x109e <vfprintf+0x300>
    108c:	a2 fe       	sbrs	r10, 2
    108e:	06 c0       	rjmp	.+12     	; 0x109c <vfprintf+0x2fe>
    1090:	b3 94       	inc	r11
    1092:	b3 94       	inc	r11
    1094:	04 c0       	rjmp	.+8      	; 0x109e <vfprintf+0x300>
    1096:	8a 2d       	mov	r24, r10
    1098:	86 78       	andi	r24, 0x86	; 134
    109a:	09 f0       	breq	.+2      	; 0x109e <vfprintf+0x300>
    109c:	b3 94       	inc	r11
    109e:	a3 fc       	sbrc	r10, 3
    10a0:	11 c0       	rjmp	.+34     	; 0x10c4 <vfprintf+0x326>
    10a2:	a0 fe       	sbrs	r10, 0
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <vfprintf+0x314>
    10a6:	b2 14       	cp	r11, r2
    10a8:	88 f4       	brcc	.+34     	; 0x10cc <vfprintf+0x32e>
    10aa:	28 0c       	add	r2, r8
    10ac:	92 2c       	mov	r9, r2
    10ae:	9b 18       	sub	r9, r11
    10b0:	0e c0       	rjmp	.+28     	; 0x10ce <vfprintf+0x330>
    10b2:	b2 14       	cp	r11, r2
    10b4:	60 f4       	brcc	.+24     	; 0x10ce <vfprintf+0x330>
    10b6:	b6 01       	movw	r22, r12
    10b8:	80 e2       	ldi	r24, 0x20	; 32
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    10c0:	b3 94       	inc	r11
    10c2:	f7 cf       	rjmp	.-18     	; 0x10b2 <vfprintf+0x314>
    10c4:	b2 14       	cp	r11, r2
    10c6:	18 f4       	brcc	.+6      	; 0x10ce <vfprintf+0x330>
    10c8:	2b 18       	sub	r2, r11
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x332>
    10cc:	98 2c       	mov	r9, r8
    10ce:	21 2c       	mov	r2, r1
    10d0:	a4 fe       	sbrs	r10, 4
    10d2:	10 c0       	rjmp	.+32     	; 0x10f4 <vfprintf+0x356>
    10d4:	b6 01       	movw	r22, r12
    10d6:	80 e3       	ldi	r24, 0x30	; 48
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    10de:	a2 fe       	sbrs	r10, 2
    10e0:	17 c0       	rjmp	.+46     	; 0x1110 <vfprintf+0x372>
    10e2:	a1 fc       	sbrc	r10, 1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <vfprintf+0x34e>
    10e6:	88 e7       	ldi	r24, 0x78	; 120
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <vfprintf+0x352>
    10ec:	88 e5       	ldi	r24, 0x58	; 88
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	b6 01       	movw	r22, r12
    10f2:	0c c0       	rjmp	.+24     	; 0x110c <vfprintf+0x36e>
    10f4:	8a 2d       	mov	r24, r10
    10f6:	86 78       	andi	r24, 0x86	; 134
    10f8:	59 f0       	breq	.+22     	; 0x1110 <vfprintf+0x372>
    10fa:	a1 fe       	sbrs	r10, 1
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <vfprintf+0x364>
    10fe:	8b e2       	ldi	r24, 0x2B	; 43
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <vfprintf+0x366>
    1102:	80 e2       	ldi	r24, 0x20	; 32
    1104:	a7 fc       	sbrc	r10, 7
    1106:	8d e2       	ldi	r24, 0x2D	; 45
    1108:	b6 01       	movw	r22, r12
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    1110:	89 14       	cp	r8, r9
    1112:	38 f4       	brcc	.+14     	; 0x1122 <vfprintf+0x384>
    1114:	b6 01       	movw	r22, r12
    1116:	80 e3       	ldi	r24, 0x30	; 48
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    111e:	9a 94       	dec	r9
    1120:	f7 cf       	rjmp	.-18     	; 0x1110 <vfprintf+0x372>
    1122:	8a 94       	dec	r8
    1124:	f3 01       	movw	r30, r6
    1126:	e8 0d       	add	r30, r8
    1128:	f1 1d       	adc	r31, r1
    112a:	80 81       	ld	r24, Z
    112c:	b6 01       	movw	r22, r12
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    1134:	81 10       	cpse	r8, r1
    1136:	f5 cf       	rjmp	.-22     	; 0x1122 <vfprintf+0x384>
    1138:	22 20       	and	r2, r2
    113a:	09 f4       	brne	.+2      	; 0x113e <vfprintf+0x3a0>
    113c:	42 ce       	rjmp	.-892    	; 0xdc2 <vfprintf+0x24>
    113e:	b6 01       	movw	r22, r12
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    1148:	2a 94       	dec	r2
    114a:	f6 cf       	rjmp	.-20     	; 0x1138 <vfprintf+0x39a>
    114c:	f6 01       	movw	r30, r12
    114e:	86 81       	ldd	r24, Z+6	; 0x06
    1150:	97 81       	ldd	r25, Z+7	; 0x07
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vfprintf+0x3ba>
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    1158:	2b 96       	adiw	r28, 0x0b	; 11
    115a:	e2 e1       	ldi	r30, 0x12	; 18
    115c:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__epilogue_restores__>

00001160 <calloc>:
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	86 9f       	mul	r24, r22
    116a:	80 01       	movw	r16, r0
    116c:	87 9f       	mul	r24, r23
    116e:	10 0d       	add	r17, r0
    1170:	96 9f       	mul	r25, r22
    1172:	10 0d       	add	r17, r0
    1174:	11 24       	eor	r1, r1
    1176:	c8 01       	movw	r24, r16
    1178:	0e 94 cc 08 	call	0x1198	; 0x1198 <malloc>
    117c:	ec 01       	movw	r28, r24
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	29 f0       	breq	.+10     	; 0x118c <calloc+0x2c>
    1182:	a8 01       	movw	r20, r16
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <memset>
    118c:	ce 01       	movw	r24, r28
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <malloc>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	91 05       	cpc	r25, r1
    11a4:	10 f4       	brcc	.+4      	; 0x11aa <malloc+0x12>
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <__flp>
    11ae:	f0 91 fd 04 	lds	r31, 0x04FD	; 0x8004fd <__flp+0x1>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	19 f1       	breq	.+70     	; 0x1204 <malloc+0x6c>
    11be:	40 81       	ld	r20, Z
    11c0:	51 81       	ldd	r21, Z+1	; 0x01
    11c2:	02 81       	ldd	r16, Z+2	; 0x02
    11c4:	13 81       	ldd	r17, Z+3	; 0x03
    11c6:	48 17       	cp	r20, r24
    11c8:	59 07       	cpc	r21, r25
    11ca:	c8 f0       	brcs	.+50     	; 0x11fe <malloc+0x66>
    11cc:	84 17       	cp	r24, r20
    11ce:	95 07       	cpc	r25, r21
    11d0:	69 f4       	brne	.+26     	; 0x11ec <malloc+0x54>
    11d2:	10 97       	sbiw	r26, 0x00	; 0
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <malloc+0x4a>
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	0c 93       	st	X, r16
    11da:	12 97       	sbiw	r26, 0x02	; 2
    11dc:	13 96       	adiw	r26, 0x03	; 3
    11de:	1c 93       	st	X, r17
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <malloc+0x98>
    11e2:	00 93 fc 04 	sts	0x04FC, r16	; 0x8004fc <__flp>
    11e6:	10 93 fd 04 	sts	0x04FD, r17	; 0x8004fd <__flp+0x1>
    11ea:	22 c0       	rjmp	.+68     	; 0x1230 <malloc+0x98>
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <malloc+0x60>
    11f2:	42 17       	cp	r20, r18
    11f4:	53 07       	cpc	r21, r19
    11f6:	18 f4       	brcc	.+6      	; 0x11fe <malloc+0x66>
    11f8:	9a 01       	movw	r18, r20
    11fa:	bd 01       	movw	r22, r26
    11fc:	ef 01       	movw	r28, r30
    11fe:	df 01       	movw	r26, r30
    1200:	f8 01       	movw	r30, r16
    1202:	db cf       	rjmp	.-74     	; 0x11ba <malloc+0x22>
    1204:	21 15       	cp	r18, r1
    1206:	31 05       	cpc	r19, r1
    1208:	f9 f0       	breq	.+62     	; 0x1248 <malloc+0xb0>
    120a:	28 1b       	sub	r18, r24
    120c:	39 0b       	sbc	r19, r25
    120e:	24 30       	cpi	r18, 0x04	; 4
    1210:	31 05       	cpc	r19, r1
    1212:	80 f4       	brcc	.+32     	; 0x1234 <malloc+0x9c>
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	61 15       	cp	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	21 f0       	breq	.+8      	; 0x1226 <malloc+0x8e>
    121e:	fb 01       	movw	r30, r22
    1220:	93 83       	std	Z+3, r25	; 0x03
    1222:	82 83       	std	Z+2, r24	; 0x02
    1224:	04 c0       	rjmp	.+8      	; 0x122e <malloc+0x96>
    1226:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <__flp+0x1>
    122a:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <__flp>
    122e:	fe 01       	movw	r30, r28
    1230:	32 96       	adiw	r30, 0x02	; 2
    1232:	44 c0       	rjmp	.+136    	; 0x12bc <malloc+0x124>
    1234:	fe 01       	movw	r30, r28
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	81 93       	st	Z+, r24
    123c:	91 93       	st	Z+, r25
    123e:	22 50       	subi	r18, 0x02	; 2
    1240:	31 09       	sbc	r19, r1
    1242:	39 83       	std	Y+1, r19	; 0x01
    1244:	28 83       	st	Y, r18
    1246:	3a c0       	rjmp	.+116    	; 0x12bc <malloc+0x124>
    1248:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <__brkval>
    124c:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <__brkval+0x1>
    1250:	23 2b       	or	r18, r19
    1252:	41 f4       	brne	.+16     	; 0x1264 <malloc+0xcc>
    1254:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    1258:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    125c:	30 93 fb 04 	sts	0x04FB, r19	; 0x8004fb <__brkval+0x1>
    1260:	20 93 fa 04 	sts	0x04FA, r18	; 0x8004fa <__brkval>
    1264:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    1268:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	41 f4       	brne	.+16     	; 0x1282 <malloc+0xea>
    1272:	2d b7       	in	r18, 0x3d	; 61
    1274:	3e b7       	in	r19, 0x3e	; 62
    1276:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    127a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    127e:	24 1b       	sub	r18, r20
    1280:	35 0b       	sbc	r19, r21
    1282:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <__brkval>
    1286:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <__brkval+0x1>
    128a:	e2 17       	cp	r30, r18
    128c:	f3 07       	cpc	r31, r19
    128e:	a0 f4       	brcc	.+40     	; 0x12b8 <malloc+0x120>
    1290:	2e 1b       	sub	r18, r30
    1292:	3f 0b       	sbc	r19, r31
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	78 f0       	brcs	.+30     	; 0x12b8 <malloc+0x120>
    129a:	ac 01       	movw	r20, r24
    129c:	4e 5f       	subi	r20, 0xFE	; 254
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	24 17       	cp	r18, r20
    12a2:	35 07       	cpc	r19, r21
    12a4:	48 f0       	brcs	.+18     	; 0x12b8 <malloc+0x120>
    12a6:	4e 0f       	add	r20, r30
    12a8:	5f 1f       	adc	r21, r31
    12aa:	50 93 fb 04 	sts	0x04FB, r21	; 0x8004fb <__brkval+0x1>
    12ae:	40 93 fa 04 	sts	0x04FA, r20	; 0x8004fa <__brkval>
    12b2:	81 93       	st	Z+, r24
    12b4:	91 93       	st	Z+, r25
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <malloc+0x124>
    12b8:	e0 e0       	ldi	r30, 0x00	; 0
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	cf 01       	movw	r24, r30
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <free>:
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <free+0xa>
    12d0:	81 c0       	rjmp	.+258    	; 0x13d4 <free+0x10c>
    12d2:	fc 01       	movw	r30, r24
    12d4:	32 97       	sbiw	r30, 0x02	; 2
    12d6:	13 82       	std	Z+3, r1	; 0x03
    12d8:	12 82       	std	Z+2, r1	; 0x02
    12da:	a0 91 fc 04 	lds	r26, 0x04FC	; 0x8004fc <__flp>
    12de:	b0 91 fd 04 	lds	r27, 0x04FD	; 0x8004fd <__flp+0x1>
    12e2:	10 97       	sbiw	r26, 0x00	; 0
    12e4:	81 f4       	brne	.+32     	; 0x1306 <free+0x3e>
    12e6:	20 81       	ld	r18, Z
    12e8:	31 81       	ldd	r19, Z+1	; 0x01
    12ea:	82 0f       	add	r24, r18
    12ec:	93 1f       	adc	r25, r19
    12ee:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <__brkval>
    12f2:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <__brkval+0x1>
    12f6:	28 17       	cp	r18, r24
    12f8:	39 07       	cpc	r19, r25
    12fa:	51 f5       	brne	.+84     	; 0x1350 <free+0x88>
    12fc:	f0 93 fb 04 	sts	0x04FB, r31	; 0x8004fb <__brkval+0x1>
    1300:	e0 93 fa 04 	sts	0x04FA, r30	; 0x8004fa <__brkval>
    1304:	67 c0       	rjmp	.+206    	; 0x13d4 <free+0x10c>
    1306:	ed 01       	movw	r28, r26
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	ce 17       	cp	r28, r30
    130e:	df 07       	cpc	r29, r31
    1310:	40 f4       	brcc	.+16     	; 0x1322 <free+0x5a>
    1312:	4a 81       	ldd	r20, Y+2	; 0x02
    1314:	5b 81       	ldd	r21, Y+3	; 0x03
    1316:	9e 01       	movw	r18, r28
    1318:	41 15       	cp	r20, r1
    131a:	51 05       	cpc	r21, r1
    131c:	f1 f0       	breq	.+60     	; 0x135a <free+0x92>
    131e:	ea 01       	movw	r28, r20
    1320:	f5 cf       	rjmp	.-22     	; 0x130c <free+0x44>
    1322:	d3 83       	std	Z+3, r29	; 0x03
    1324:	c2 83       	std	Z+2, r28	; 0x02
    1326:	40 81       	ld	r20, Z
    1328:	51 81       	ldd	r21, Z+1	; 0x01
    132a:	84 0f       	add	r24, r20
    132c:	95 1f       	adc	r25, r21
    132e:	c8 17       	cp	r28, r24
    1330:	d9 07       	cpc	r29, r25
    1332:	59 f4       	brne	.+22     	; 0x134a <free+0x82>
    1334:	88 81       	ld	r24, Y
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	84 0f       	add	r24, r20
    133a:	95 1f       	adc	r25, r21
    133c:	02 96       	adiw	r24, 0x02	; 2
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	93 83       	std	Z+3, r25	; 0x03
    1348:	82 83       	std	Z+2, r24	; 0x02
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	29 f4       	brne	.+10     	; 0x135a <free+0x92>
    1350:	f0 93 fd 04 	sts	0x04FD, r31	; 0x8004fd <__flp+0x1>
    1354:	e0 93 fc 04 	sts	0x04FC, r30	; 0x8004fc <__flp>
    1358:	3d c0       	rjmp	.+122    	; 0x13d4 <free+0x10c>
    135a:	e9 01       	movw	r28, r18
    135c:	fb 83       	std	Y+3, r31	; 0x03
    135e:	ea 83       	std	Y+2, r30	; 0x02
    1360:	49 91       	ld	r20, Y+
    1362:	59 91       	ld	r21, Y+
    1364:	c4 0f       	add	r28, r20
    1366:	d5 1f       	adc	r29, r21
    1368:	ec 17       	cp	r30, r28
    136a:	fd 07       	cpc	r31, r29
    136c:	61 f4       	brne	.+24     	; 0x1386 <free+0xbe>
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	84 0f       	add	r24, r20
    1374:	95 1f       	adc	r25, r21
    1376:	02 96       	adiw	r24, 0x02	; 2
    1378:	e9 01       	movw	r28, r18
    137a:	99 83       	std	Y+1, r25	; 0x01
    137c:	88 83       	st	Y, r24
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	9b 83       	std	Y+3, r25	; 0x03
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	e0 e0       	ldi	r30, 0x00	; 0
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	8d 91       	ld	r24, X+
    138e:	9c 91       	ld	r25, X
    1390:	13 97       	sbiw	r26, 0x03	; 3
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	19 f0       	breq	.+6      	; 0x139c <free+0xd4>
    1396:	fd 01       	movw	r30, r26
    1398:	dc 01       	movw	r26, r24
    139a:	f7 cf       	rjmp	.-18     	; 0x138a <free+0xc2>
    139c:	8d 91       	ld	r24, X+
    139e:	9c 91       	ld	r25, X
    13a0:	11 97       	sbiw	r26, 0x01	; 1
    13a2:	9d 01       	movw	r18, r26
    13a4:	2e 5f       	subi	r18, 0xFE	; 254
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <__brkval>
    13b0:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <__brkval+0x1>
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <free+0x10c>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <free+0x100>
    13be:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <__flp+0x1>
    13c2:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <__flp>
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <free+0x104>
    13c8:	13 82       	std	Z+3, r1	; 0x03
    13ca:	12 82       	std	Z+2, r1	; 0x02
    13cc:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <__brkval+0x1>
    13d0:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <__brkval>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <strnlen_P>:
    13da:	fc 01       	movw	r30, r24
    13dc:	05 90       	lpm	r0, Z+
    13de:	61 50       	subi	r22, 0x01	; 1
    13e0:	70 40       	sbci	r23, 0x00	; 0
    13e2:	01 10       	cpse	r0, r1
    13e4:	d8 f7       	brcc	.-10     	; 0x13dc <strnlen_P+0x2>
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	8e 0f       	add	r24, r30
    13ec:	9f 1f       	adc	r25, r31
    13ee:	08 95       	ret

000013f0 <memset>:
    13f0:	dc 01       	movw	r26, r24
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <memset+0x6>
    13f4:	6d 93       	st	X+, r22
    13f6:	41 50       	subi	r20, 0x01	; 1
    13f8:	50 40       	sbci	r21, 0x00	; 0
    13fa:	e0 f7       	brcc	.-8      	; 0x13f4 <memset+0x4>
    13fc:	08 95       	ret

000013fe <strnlen>:
    13fe:	fc 01       	movw	r30, r24
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	70 40       	sbci	r23, 0x00	; 0
    1404:	01 90       	ld	r0, Z+
    1406:	01 10       	cpse	r0, r1
    1408:	d8 f7       	brcc	.-10     	; 0x1400 <strnlen+0x2>
    140a:	80 95       	com	r24
    140c:	90 95       	com	r25
    140e:	8e 0f       	add	r24, r30
    1410:	9f 1f       	adc	r25, r31
    1412:	08 95       	ret

00001414 <fputc>:
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	fb 01       	movw	r30, r22
    141e:	23 81       	ldd	r18, Z+3	; 0x03
    1420:	21 fd       	sbrc	r18, 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <fputc+0x16>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255
    1428:	2c c0       	rjmp	.+88     	; 0x1482 <fputc+0x6e>
    142a:	22 ff       	sbrs	r18, 2
    142c:	16 c0       	rjmp	.+44     	; 0x145a <fputc+0x46>
    142e:	46 81       	ldd	r20, Z+6	; 0x06
    1430:	57 81       	ldd	r21, Z+7	; 0x07
    1432:	24 81       	ldd	r18, Z+4	; 0x04
    1434:	35 81       	ldd	r19, Z+5	; 0x05
    1436:	42 17       	cp	r20, r18
    1438:	53 07       	cpc	r21, r19
    143a:	44 f4       	brge	.+16     	; 0x144c <fputc+0x38>
    143c:	a0 81       	ld	r26, Z
    143e:	b1 81       	ldd	r27, Z+1	; 0x01
    1440:	9d 01       	movw	r18, r26
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	31 83       	std	Z+1, r19	; 0x01
    1448:	20 83       	st	Z, r18
    144a:	8c 93       	st	X, r24
    144c:	26 81       	ldd	r18, Z+6	; 0x06
    144e:	37 81       	ldd	r19, Z+7	; 0x07
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	37 83       	std	Z+7, r19	; 0x07
    1456:	26 83       	std	Z+6, r18	; 0x06
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <fputc+0x6e>
    145a:	8b 01       	movw	r16, r22
    145c:	ec 01       	movw	r28, r24
    145e:	fb 01       	movw	r30, r22
    1460:	00 84       	ldd	r0, Z+8	; 0x08
    1462:	f1 85       	ldd	r31, Z+9	; 0x09
    1464:	e0 2d       	mov	r30, r0
    1466:	09 95       	icall
    1468:	89 2b       	or	r24, r25
    146a:	e1 f6       	brne	.-72     	; 0x1424 <fputc+0x10>
    146c:	d8 01       	movw	r26, r16
    146e:	16 96       	adiw	r26, 0x06	; 6
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	17 97       	sbiw	r26, 0x07	; 7
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	17 96       	adiw	r26, 0x07	; 7
    147a:	9c 93       	st	X, r25
    147c:	8e 93       	st	-X, r24
    147e:	16 97       	sbiw	r26, 0x06	; 6
    1480:	ce 01       	movw	r24, r28
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	08 95       	ret

0000148c <__ultoa_invert>:
    148c:	fa 01       	movw	r30, r20
    148e:	aa 27       	eor	r26, r26
    1490:	28 30       	cpi	r18, 0x08	; 8
    1492:	51 f1       	breq	.+84     	; 0x14e8 <__ultoa_invert+0x5c>
    1494:	20 31       	cpi	r18, 0x10	; 16
    1496:	81 f1       	breq	.+96     	; 0x14f8 <__ultoa_invert+0x6c>
    1498:	e8 94       	clt
    149a:	6f 93       	push	r22
    149c:	6e 7f       	andi	r22, 0xFE	; 254
    149e:	6e 5f       	subi	r22, 0xFE	; 254
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	af 4f       	sbci	r26, 0xFF	; 255
    14a8:	b1 e0       	ldi	r27, 0x01	; 1
    14aa:	3e d0       	rcall	.+124    	; 0x1528 <__ultoa_invert+0x9c>
    14ac:	b4 e0       	ldi	r27, 0x04	; 4
    14ae:	3c d0       	rcall	.+120    	; 0x1528 <__ultoa_invert+0x9c>
    14b0:	67 0f       	add	r22, r23
    14b2:	78 1f       	adc	r23, r24
    14b4:	89 1f       	adc	r24, r25
    14b6:	9a 1f       	adc	r25, r26
    14b8:	a1 1d       	adc	r26, r1
    14ba:	68 0f       	add	r22, r24
    14bc:	79 1f       	adc	r23, r25
    14be:	8a 1f       	adc	r24, r26
    14c0:	91 1d       	adc	r25, r1
    14c2:	a1 1d       	adc	r26, r1
    14c4:	6a 0f       	add	r22, r26
    14c6:	71 1d       	adc	r23, r1
    14c8:	81 1d       	adc	r24, r1
    14ca:	91 1d       	adc	r25, r1
    14cc:	a1 1d       	adc	r26, r1
    14ce:	20 d0       	rcall	.+64     	; 0x1510 <__ultoa_invert+0x84>
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <__ultoa_invert+0x48>
    14d2:	68 94       	set
    14d4:	3f 91       	pop	r19
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	26 9f       	mul	r18, r22
    14da:	11 24       	eor	r1, r1
    14dc:	30 19       	sub	r19, r0
    14de:	30 5d       	subi	r19, 0xD0	; 208
    14e0:	31 93       	st	Z+, r19
    14e2:	de f6       	brtc	.-74     	; 0x149a <__ultoa_invert+0xe>
    14e4:	cf 01       	movw	r24, r30
    14e6:	08 95       	ret
    14e8:	46 2f       	mov	r20, r22
    14ea:	47 70       	andi	r20, 0x07	; 7
    14ec:	40 5d       	subi	r20, 0xD0	; 208
    14ee:	41 93       	st	Z+, r20
    14f0:	b3 e0       	ldi	r27, 0x03	; 3
    14f2:	0f d0       	rcall	.+30     	; 0x1512 <__ultoa_invert+0x86>
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <__ultoa_invert+0x5c>
    14f6:	f6 cf       	rjmp	.-20     	; 0x14e4 <__ultoa_invert+0x58>
    14f8:	46 2f       	mov	r20, r22
    14fa:	4f 70       	andi	r20, 0x0F	; 15
    14fc:	40 5d       	subi	r20, 0xD0	; 208
    14fe:	4a 33       	cpi	r20, 0x3A	; 58
    1500:	18 f0       	brcs	.+6      	; 0x1508 <__ultoa_invert+0x7c>
    1502:	49 5d       	subi	r20, 0xD9	; 217
    1504:	31 fd       	sbrc	r19, 1
    1506:	40 52       	subi	r20, 0x20	; 32
    1508:	41 93       	st	Z+, r20
    150a:	02 d0       	rcall	.+4      	; 0x1510 <__ultoa_invert+0x84>
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__ultoa_invert+0x6c>
    150e:	ea cf       	rjmp	.-44     	; 0x14e4 <__ultoa_invert+0x58>
    1510:	b4 e0       	ldi	r27, 0x04	; 4
    1512:	a6 95       	lsr	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__ultoa_invert+0x86>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 05       	cpc	r22, r1
    1524:	71 05       	cpc	r23, r1
    1526:	08 95       	ret
    1528:	9b 01       	movw	r18, r22
    152a:	ac 01       	movw	r20, r24
    152c:	0a 2e       	mov	r0, r26
    152e:	06 94       	lsr	r0
    1530:	57 95       	ror	r21
    1532:	47 95       	ror	r20
    1534:	37 95       	ror	r19
    1536:	27 95       	ror	r18
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__ultoa_invert+0xa2>
    153c:	62 0f       	add	r22, r18
    153e:	73 1f       	adc	r23, r19
    1540:	84 1f       	adc	r24, r20
    1542:	95 1f       	adc	r25, r21
    1544:	a0 1d       	adc	r26, r0
    1546:	08 95       	ret

00001548 <__divmodsi4>:
    1548:	05 2e       	mov	r0, r21
    154a:	97 fb       	bst	r25, 7
    154c:	1e f4       	brtc	.+6      	; 0x1554 <__divmodsi4+0xc>
    154e:	00 94       	com	r0
    1550:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__negsi2>
    1554:	57 fd       	sbrc	r21, 7
    1556:	07 d0       	rcall	.+14     	; 0x1566 <__divmodsi4_neg2>
    1558:	0e 94 0d 0b 	call	0x161a	; 0x161a <__udivmodsi4>
    155c:	07 fc       	sbrc	r0, 7
    155e:	03 d0       	rcall	.+6      	; 0x1566 <__divmodsi4_neg2>
    1560:	4e f4       	brtc	.+18     	; 0x1574 <__divmodsi4_exit>
    1562:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__negsi2>

00001566 <__divmodsi4_neg2>:
    1566:	50 95       	com	r21
    1568:	40 95       	com	r20
    156a:	30 95       	com	r19
    156c:	21 95       	neg	r18
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	4f 4f       	sbci	r20, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255

00001574 <__divmodsi4_exit>:
    1574:	08 95       	ret

00001576 <__negsi2>:
    1576:	90 95       	com	r25
    1578:	80 95       	com	r24
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	08 95       	ret

00001586 <__muluhisi3>:
    1586:	0e 94 2f 0b 	call	0x165e	; 0x165e <__umulhisi3>
    158a:	a5 9f       	mul	r26, r21
    158c:	90 0d       	add	r25, r0
    158e:	b4 9f       	mul	r27, r20
    1590:	90 0d       	add	r25, r0
    1592:	a4 9f       	mul	r26, r20
    1594:	80 0d       	add	r24, r0
    1596:	91 1d       	adc	r25, r1
    1598:	11 24       	eor	r1, r1
    159a:	08 95       	ret

0000159c <__mulshisi3>:
    159c:	b7 ff       	sbrs	r27, 7
    159e:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__muluhisi3>

000015a2 <__mulohisi3>:
    15a2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__muluhisi3>
    15a6:	82 1b       	sub	r24, r18
    15a8:	93 0b       	sbc	r25, r19
    15aa:	08 95       	ret

000015ac <__prologue_saves__>:
    15ac:	2f 92       	push	r2
    15ae:	3f 92       	push	r3
    15b0:	4f 92       	push	r4
    15b2:	5f 92       	push	r5
    15b4:	6f 92       	push	r6
    15b6:	7f 92       	push	r7
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	ca 1b       	sub	r28, r26
    15d6:	db 0b       	sbc	r29, r27
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	09 94       	ijmp

000015e4 <__epilogue_restores__>:
    15e4:	2a 88       	ldd	r2, Y+18	; 0x12
    15e6:	39 88       	ldd	r3, Y+17	; 0x11
    15e8:	48 88       	ldd	r4, Y+16	; 0x10
    15ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    15ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15f6:	b9 84       	ldd	r11, Y+9	; 0x09
    15f8:	c8 84       	ldd	r12, Y+8	; 0x08
    15fa:	df 80       	ldd	r13, Y+7	; 0x07
    15fc:	ee 80       	ldd	r14, Y+6	; 0x06
    15fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1600:	0c 81       	ldd	r16, Y+4	; 0x04
    1602:	1b 81       	ldd	r17, Y+3	; 0x03
    1604:	aa 81       	ldd	r26, Y+2	; 0x02
    1606:	b9 81       	ldd	r27, Y+1	; 0x01
    1608:	ce 0f       	add	r28, r30
    160a:	d1 1d       	adc	r29, r1
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	ed 01       	movw	r28, r26
    1618:	08 95       	ret

0000161a <__udivmodsi4>:
    161a:	a1 e2       	ldi	r26, 0x21	; 33
    161c:	1a 2e       	mov	r1, r26
    161e:	aa 1b       	sub	r26, r26
    1620:	bb 1b       	sub	r27, r27
    1622:	fd 01       	movw	r30, r26
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <__udivmodsi4_ep>

00001626 <__udivmodsi4_loop>:
    1626:	aa 1f       	adc	r26, r26
    1628:	bb 1f       	adc	r27, r27
    162a:	ee 1f       	adc	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	a2 17       	cp	r26, r18
    1630:	b3 07       	cpc	r27, r19
    1632:	e4 07       	cpc	r30, r20
    1634:	f5 07       	cpc	r31, r21
    1636:	20 f0       	brcs	.+8      	; 0x1640 <__udivmodsi4_ep>
    1638:	a2 1b       	sub	r26, r18
    163a:	b3 0b       	sbc	r27, r19
    163c:	e4 0b       	sbc	r30, r20
    163e:	f5 0b       	sbc	r31, r21

00001640 <__udivmodsi4_ep>:
    1640:	66 1f       	adc	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	1a 94       	dec	r1
    164a:	69 f7       	brne	.-38     	; 0x1626 <__udivmodsi4_loop>
    164c:	60 95       	com	r22
    164e:	70 95       	com	r23
    1650:	80 95       	com	r24
    1652:	90 95       	com	r25
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	bd 01       	movw	r22, r26
    165a:	cf 01       	movw	r24, r30
    165c:	08 95       	ret

0000165e <__umulhisi3>:
    165e:	a2 9f       	mul	r26, r18
    1660:	b0 01       	movw	r22, r0
    1662:	b3 9f       	mul	r27, r19
    1664:	c0 01       	movw	r24, r0
    1666:	a3 9f       	mul	r26, r19
    1668:	70 0d       	add	r23, r0
    166a:	81 1d       	adc	r24, r1
    166c:	11 24       	eor	r1, r1
    166e:	91 1d       	adc	r25, r1
    1670:	b2 9f       	mul	r27, r18
    1672:	70 0d       	add	r23, r0
    1674:	81 1d       	adc	r24, r1
    1676:	11 24       	eor	r1, r1
    1678:	91 1d       	adc	r25, r1
    167a:	08 95       	ret

0000167c <_exit>:
    167c:	f8 94       	cli

0000167e <__stop_program>:
    167e:	ff cf       	rjmp	.-2      	; 0x167e <__stop_program>
